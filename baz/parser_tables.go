// generated by Textmapper; DO NOT EDIT

package baz

import (
	"fmt"
)

// Symbol represents a set of all terminal and non-terminal symbols of the baz language.
type Symbol int

var symbolStr = [...]string{
	"input",
	"Module",
	"TopLevelEntity_optlist",
	"TopLevelEntity",
	"TypeDef",
	"LocalIdent",
	"Type",
	"FirstClassType",
	"ConcreteType",
	"VoidType",
	"IntType",
	"MetadataType",
	"ArrayType",
	"OpaqueType",
	"UintLit",
}

func (n Symbol) String() string {
	if n < Symbol(NumTokens) {
		return Token(n).String()
	}
	i := int(n) - int(NumTokens)
	if i < len(symbolStr) {
		return symbolStr[i]
	}
	return fmt.Sprintf("nonterminal(%d)", n)
}

var tmAction = []int32{
	-3, 0, -9, 7, 2, 4, -1, -1, -1, 15, 16, 18, 14, -1, 6, 9,
	10, 8, 12, 11, 13, 5, 19, -1, -1, -1, 17, -1, -2,
}

var tmLalr = []int32{
	0, 3, 4, 3, -1, -2, 4, -1, 0, 1, -1, -2,
}

var tmGoto = []int32{
	0, 2, 2, 2, 2, 4, 6, 10, 14, 16, 18, 22, 24, 28, 30, 32,
	34, 36, 38, 40, 42, 44, 48, 52, 56, 60, 64, 68, 72, 74, 76,
}

var tmFromTo = []int8{
	27, 28, 2, 3, 13, 22, 8, 9, 24, 9, 8, 10, 24, 10, 8, 11,
	7, 8, 8, 12, 24, 12, 23, 24, 8, 13, 24, 13, 25, 26, 6, 7,
	0, 27, 0, 1, 0, 2, 2, 4, 2, 5, 2, 6, 8, 14, 24, 25,
	8, 15, 24, 15, 8, 16, 24, 16, 8, 17, 24, 17, 8, 18, 24, 18,
	8, 19, 24, 19, 8, 20, 24, 20, 8, 21, 13, 23,
}

var tmRuleLen = []int8{
	1, 1, 2, 0, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 5, 1, 1,
}

var tmRuleSymbol = []int32{
	15, 16, 17, 17, 18, 19, 19, 20, 21, 21, 22, 22, 23, 23, 24, 25,
	26, 27, 28, 29,
}
