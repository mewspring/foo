// generated by Textmapper; DO NOT EDIT

package baz

import (
	"fmt"
)

type NodeType int

type Listener func(t NodeType, offset, endoffset int)

const (
	Module NodeType = iota + 1  // TopLevelEntities=(TopLevelEntity)*
	TypeDef  // LocalIdent OpaqueType? Type?
	LocalIdent
	VoidType
	IntType
	MetadataType
	ArrayType  // UintLit Type
	OpaqueType
	UintLit
	NodeTypeMax
)

var nodeTypeStr = [...]string{
	"NONE",
	"Module",
	"TypeDef",
	"LocalIdent",
	"VoidType",
	"IntType",
	"MetadataType",
	"ArrayType",
	"OpaqueType",
	"UintLit",
}

func (t NodeType) String() string {
	if t >= 0 && int(t) < len(nodeTypeStr) {
		return nodeTypeStr[t]
	}
	return fmt.Sprintf("node(%d)", t)
}

var ConcreteType = []NodeType{
    ArrayType,
    IntType,
}

var FirstClassType = []NodeType{
    ArrayType,
    IntType,
    MetadataType,
}

var TopLevelEntity = []NodeType{
    TypeDef,
}

var Type = []NodeType{
    ArrayType,
    IntType,
    MetadataType,
    VoidType,
}

var ruleNodeType = [...]NodeType{
	0, // input : Module
	Module, // Module : TopLevelEntity_optlist
	0, // TopLevelEntity_optlist : TopLevelEntity_optlist TopLevelEntity
	0, // TopLevelEntity_optlist :
	0, // TopLevelEntity : TypeDef
	TypeDef, // TypeDef : LocalIdent '=' 'type' OpaqueType
	TypeDef, // TypeDef : LocalIdent '=' 'type' Type
	LocalIdent, // LocalIdent : local_ident_tok
	0, // Type : VoidType
	0, // Type : FirstClassType
	0, // FirstClassType : ConcreteType
	0, // FirstClassType : MetadataType
	0, // ConcreteType : IntType
	0, // ConcreteType : ArrayType
	VoidType, // VoidType : 'void'
	IntType, // IntType : int_type_tok
	MetadataType, // MetadataType : 'metadata'
	ArrayType, // ArrayType : '[' UintLit 'x' Type ']'
	OpaqueType, // OpaqueType : 'opaque'
	UintLit, // UintLit : int_lit_tok
}

