// generated by Textmapper; DO NOT EDIT

package ast

import (
	"github.com/mewspring/foo/baz"
	"github.com/mewspring/foo/baz/selector"
)

type Node interface {
	Type() baz.NodeType
	Offset() int
	Endoffset() int
	// Child returns the first child node that matches the selector.
	Child(sel selector.Selector) Node
	Children(sel selector.Selector) []Node
	// Next returns the first element among the following siblings that matches the selector.
	Next(sel selector.Selector) Node
	// NextAll returns all following siblings of the node that match the selector.
	NextAll(sel selector.Selector) []Node
	Text() string
}

// Interfaces.

type BazNode interface {
  Node
	bazNodeNode()
}

// All types implement BazNode.
func (ArrayType) bazNodeNode() {}
func (IntType) bazNodeNode() {}
func (LocalIdent) bazNodeNode() {}
func (MetadataType) bazNodeNode() {}
func (Module) bazNodeNode() {}
func (OpaqueType) bazNodeNode() {}
func (TypeDef) bazNodeNode() {}
func (UintLit) bazNodeNode() {}
func (VoidType) bazNodeNode() {}

type ConcreteType interface {
  BazNode
	concreteTypeNode()
}

// concreteTypeNode() ensures that only the following types can be
// assigned to ConcreteType.
//
func (ArrayType) concreteTypeNode() {}
func (IntType) concreteTypeNode() {}

type FirstClassType interface {
  BazNode
	firstClassTypeNode()
}

// firstClassTypeNode() ensures that only the following types can be
// assigned to FirstClassType.
//
func (ArrayType) firstClassTypeNode() {}
func (IntType) firstClassTypeNode() {}
func (MetadataType) firstClassTypeNode() {}

type TopLevelEntity interface {
  BazNode
	topLevelEntityNode()
}

// topLevelEntityNode() ensures that only the following types can be
// assigned to TopLevelEntity.
//
func (TypeDef) topLevelEntityNode() {}

type Type interface {
  BazNode
	typeNode()
}

// typeNode() ensures that only the following types can be
// assigned to Type.
//
func (ArrayType) typeNode() {}
func (IntType) typeNode() {}
func (MetadataType) typeNode() {}
func (VoidType) typeNode() {}

// Types.

type ArrayType struct {
	Node
}

func (n ArrayType) UintLit() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

func (n ArrayType) Type() Type {
	return ToBazNode(n.Child(selector.Type)).(Type)
}

type IntType struct {
	Node
}

type LocalIdent struct {
	Node
}

type MetadataType struct {
	Node
}

type Module struct {
	Node
}

func (n Module) TopLevelEntities() []TopLevelEntity {
	nodes := n.Children(selector.TopLevelEntity)
	var result []TopLevelEntity = make([]TopLevelEntity, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, TopLevelEntity{node})
	}
	return result
}

type OpaqueType struct {
	Node
}

type TypeDef struct {
	Node
}

func (n TypeDef) LocalIdent() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n TypeDef) OpaqueType() *OpaqueType {
	if child := n.Child(selector.OpaqueType); child != nil {
		return &OpaqueType{child}
	}
	return nil
}

func (n TypeDef) Type() Type {
	if child := n.Child(selector.Type); child != nil {
		return ToBazNode(child).(Type)
	}
	return nil
}

type UintLit struct {
	Node
}

type VoidType struct {
	Node
}


