// generated by Textmapper; DO NOT EDIT

package ast

import (
	"github.com/mewspring/foo/fob"
	"github.com/mewspring/foo/fob/selector"
)

type Node interface {
	Type() fob.NodeType
	Offset() int
	Endoffset() int
	// Child returns the first child node that matches the selector.
	Child(sel selector.Selector) Node
	Children(sel selector.Selector) []Node
	// Next returns the first element among the following siblings that matches the selector.
	Next(sel selector.Selector) Node
	// NextAll returns all following siblings of the node that match the selector.
	NextAll(sel selector.Selector) []Node
	Text() string
}

// Interfaces.

type FobNode interface {
	Node
	fobNodeNode()
}

// All types implement FobNode.
func (CallingConv) fobNodeNode() {}
func (FuncHeader) fobNodeNode()  {}

// Types.

type CallingConv struct {
	Node
}

type FuncHeader struct {
	Node
}

func (n FuncHeader) CallingConv() *CallingConv {
	if child := n.Child(selector.CallingConv); child != nil {
		return &CallingConv{child}
	}
	return nil
}
