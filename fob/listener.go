// generated by Textmapper; DO NOT EDIT

package fob

import (
	"fmt"
)

type NodeType int

type Listener func(t NodeType, offset, endoffset int)

const (
	FuncHeader NodeType = iota + 1 // CallingConv?
	CallingConv
	NodeTypeMax
)

var nodeTypeStr = [...]string{
	"NONE",
	"FuncHeader",
	"CallingConv",
}

func (t NodeType) String() string {
	if t >= 0 && int(t) < len(nodeTypeStr) {
		return nodeTypeStr[t]
	}
	return fmt.Sprintf("node(%d)", t)
}

var ruleNodeType = [...]NodeType{
	0,           // input : FuncHeader
	FuncHeader,  // FuncHeader : CallingConvopt
	CallingConv, // CallingConv : 'x86_fastcallcc'
	CallingConv, // CallingConv : 'x86_stdcallcc'
	CallingConv, // CallingConv : 'x86_thiscallcc'
	0,           // CallingConvopt : CallingConv
	0,           // CallingConvopt :
}
