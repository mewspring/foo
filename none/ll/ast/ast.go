// generated by Textmapper; DO NOT EDIT

package ast

import (
	"github.com/mewspring/foo/none/ll"
	"github.com/mewspring/foo/none/ll/selector"
)

type Node interface {
	Type() ll.NodeType
	Offset() int
	Endoffset() int
	// Child returns the first child node that matches the selector.
	Child(sel selector.Selector) Node
	Children(sel selector.Selector) []Node
	// Next returns the first element among the following siblings that matches the selector.
	Next(sel selector.Selector) Node
	// NextAll returns all following siblings of the node that match the selector.
	NextAll(sel selector.Selector) []Node
	Text() string
}

// Interfaces.

type LlvmNode interface {
	Node
	llvmNodeNode()
}

// All types implement LlvmNode.
func (AShrExpr) llvmNodeNode()                   {}
func (AShrInst) llvmNodeNode()                   {}
func (AddExpr) llvmNodeNode()                    {}
func (AddInst) llvmNodeNode()                    {}
func (AddrSpace) llvmNodeNode()                  {}
func (AddrSpaceCastExpr) llvmNodeNode()          {}
func (AddrSpaceCastInst) llvmNodeNode()          {}
func (AliasDef) llvmNodeNode()                   {}
func (AlignField) llvmNodeNode()                 {}
func (AlignPair) llvmNodeNode()                  {}
func (AlignStack) llvmNodeNode()                 {}
func (AlignStackPair) llvmNodeNode()             {}
func (Alignment) llvmNodeNode()                  {}
func (AllocSize) llvmNodeNode()                  {}
func (AllocaInst) llvmNodeNode()                 {}
func (AndExpr) llvmNodeNode()                    {}
func (AndInst) llvmNodeNode()                    {}
func (Arg) llvmNodeNode()                        {}
func (ArgField) llvmNodeNode()                   {}
func (Args) llvmNodeNode()                       {}
func (ArrayConst) llvmNodeNode()                 {}
func (ArrayType) llvmNodeNode()                  {}
func (Atomic) llvmNodeNode()                     {}
func (AtomicOp) llvmNodeNode()                   {}
func (AtomicOrdering) llvmNodeNode()             {}
func (AtomicRMWInst) llvmNodeNode()              {}
func (AttrGroupDef) llvmNodeNode()               {}
func (AttrGroupID) llvmNodeNode()                {}
func (AttrPair) llvmNodeNode()                   {}
func (AttrString) llvmNodeNode()                 {}
func (AttributesField) llvmNodeNode()            {}
func (BaseTypeField) llvmNodeNode()              {}
func (BasicBlock) llvmNodeNode()                 {}
func (BitCastExpr) llvmNodeNode()                {}
func (BitCastInst) llvmNodeNode()                {}
func (BlockAddressConst) llvmNodeNode()          {}
func (BoolConst) llvmNodeNode()                  {}
func (BoolLit) llvmNodeNode()                    {}
func (BrTerm) llvmNodeNode()                     {}
func (CCField) llvmNodeNode()                    {}
func (CallInst) llvmNodeNode()                   {}
func (CallingConv) llvmNodeNode()                {}
func (Case) llvmNodeNode()                       {}
func (CatchClause) llvmNodeNode()                {}
func (CatchPadInst) llvmNodeNode()               {}
func (CatchRetTerm) llvmNodeNode()               {}
func (CatchSwitchTerm) llvmNodeNode()            {}
func (CharArrayConst) llvmNodeNode()             {}
func (ChecksumField) llvmNodeNode()              {}
func (ChecksumKind) llvmNodeNode()               {}
func (ChecksumkindField) llvmNodeNode()          {}
func (Cleanup) llvmNodeNode()                    {}
func (CleanupPadInst) llvmNodeNode()             {}
func (CleanupRetTerm) llvmNodeNode()             {}
func (CmpXchgInst) llvmNodeNode()                {}
func (ColumnField) llvmNodeNode()                {}
func (Comdat) llvmNodeNode()                     {}
func (ComdatDef) llvmNodeNode()                  {}
func (ComdatName) llvmNodeNode()                 {}
func (CondBrTerm) llvmNodeNode()                 {}
func (ConfigMacrosField) llvmNodeNode()          {}
func (ContainingTypeField) llvmNodeNode()        {}
func (CountField) llvmNodeNode()                 {}
func (DIBasicType) llvmNodeNode()                {}
func (DICompileUnit) llvmNodeNode()              {}
func (DICompositeType) llvmNodeNode()            {}
func (DIDerivedType) llvmNodeNode()              {}
func (DIEnumerator) llvmNodeNode()               {}
func (DIExpression) llvmNodeNode()               {}
func (DIFile) llvmNodeNode()                     {}
func (DIFlag) llvmNodeNode()                     {}
func (DIFlags) llvmNodeNode()                    {}
func (DIGlobalVariable) llvmNodeNode()           {}
func (DIGlobalVariableExpression) llvmNodeNode() {}
func (DIImportedEntity) llvmNodeNode()           {}
func (DILabel) llvmNodeNode()                    {}
func (DILexicalBlock) llvmNodeNode()             {}
func (DILexicalBlockFile) llvmNodeNode()         {}
func (DILocalVariable) llvmNodeNode()            {}
func (DILocation) llvmNodeNode()                 {}
func (DIMacro) llvmNodeNode()                    {}
func (DIMacroFile) llvmNodeNode()                {}
func (DIModule) llvmNodeNode()                   {}
func (DINamespace) llvmNodeNode()                {}
func (DIObjCProperty) llvmNodeNode()             {}
func (DISubprogram) llvmNodeNode()               {}
func (DISubrange) llvmNodeNode()                 {}
func (DISubroutineType) llvmNodeNode()           {}
func (DITemplateTypeParameter) llvmNodeNode()    {}
func (DITemplateValueParameter) llvmNodeNode()   {}
func (DLLStorageClass) llvmNodeNode()            {}
func (DebugInfoForProfilingField) llvmNodeNode() {}
func (DeclarationField) llvmNodeNode()           {}
func (Dereferenceable) llvmNodeNode()            {}
func (DirectoryField) llvmNodeNode()             {}
func (DiscriminatorField) llvmNodeNode()         {}
func (DiscriminatorIntField) llvmNodeNode()      {}
func (Distinct) llvmNodeNode()                   {}
func (DwarfAddressSpaceField) llvmNodeNode()     {}
func (DwarfAttEncoding) llvmNodeNode()           {}
func (DwarfCC) llvmNodeNode()                    {}
func (DwarfLang) llvmNodeNode()                  {}
func (DwarfMacinfo) llvmNodeNode()               {}
func (DwarfOp) llvmNodeNode()                    {}
func (DwarfTag) llvmNodeNode()                   {}
func (DwarfVirtuality) llvmNodeNode()            {}
func (DwoIdField) llvmNodeNode()                 {}
func (ElementsField) llvmNodeNode()              {}
func (Ellipsis) llvmNodeNode()                   {}
func (EmissionKind) llvmNodeNode()               {}
func (EmissionKindField) llvmNodeNode()          {}
func (EncodingField) llvmNodeNode()              {}
func (EntityField) llvmNodeNode()                {}
func (EnumsField) llvmNodeNode()                 {}
func (Exact) llvmNodeNode()                      {}
func (ExceptionArg) llvmNodeNode()               {}
func (ExceptionScope) llvmNodeNode()             {}
func (ExportSymbolsField) llvmNodeNode()         {}
func (ExprField) llvmNodeNode()                  {}
func (ExternLinkage) llvmNodeNode()              {}
func (ExternallyInitialized) llvmNodeNode()      {}
func (ExtraDataField) llvmNodeNode()             {}
func (ExtractElementExpr) llvmNodeNode()         {}
func (ExtractElementInst) llvmNodeNode()         {}
func (ExtractValueExpr) llvmNodeNode()           {}
func (ExtractValueInst) llvmNodeNode()           {}
func (FAddExpr) llvmNodeNode()                   {}
func (FAddInst) llvmNodeNode()                   {}
func (FCmpExpr) llvmNodeNode()                   {}
func (FCmpInst) llvmNodeNode()                   {}
func (FDivExpr) llvmNodeNode()                   {}
func (FDivInst) llvmNodeNode()                   {}
func (FMulExpr) llvmNodeNode()                   {}
func (FMulInst) llvmNodeNode()                   {}
func (FPExtExpr) llvmNodeNode()                  {}
func (FPExtInst) llvmNodeNode()                  {}
func (FPToSIExpr) llvmNodeNode()                 {}
func (FPToSIInst) llvmNodeNode()                 {}
func (FPToUIExpr) llvmNodeNode()                 {}
func (FPToUIInst) llvmNodeNode()                 {}
func (FPTruncExpr) llvmNodeNode()                {}
func (FPTruncInst) llvmNodeNode()                {}
func (FPred) llvmNodeNode()                      {}
func (FRemExpr) llvmNodeNode()                   {}
func (FRemInst) llvmNodeNode()                   {}
func (FSubExpr) llvmNodeNode()                   {}
func (FSubInst) llvmNodeNode()                   {}
func (FastMathFlag) llvmNodeNode()               {}
func (FenceInst) llvmNodeNode()                  {}
func (FileField) llvmNodeNode()                  {}
func (FilenameField) llvmNodeNode()              {}
func (FilterClause) llvmNodeNode()               {}
func (FlagsField) llvmNodeNode()                 {}
func (FlagsStringField) llvmNodeNode()           {}
func (FloatConst) llvmNodeNode()                 {}
func (FloatKind) llvmNodeNode()                  {}
func (FloatLit) llvmNodeNode()                   {}
func (FloatType) llvmNodeNode()                  {}
func (FuncAttribute) llvmNodeNode()              {}
func (FuncBody) llvmNodeNode()                   {}
func (FuncDecl) llvmNodeNode()                   {}
func (FuncDef) llvmNodeNode()                    {}
func (FuncHeader) llvmNodeNode()                 {}
func (FuncMetadata) llvmNodeNode()               {}
func (FuncType) llvmNodeNode()                   {}
func (GCNode) llvmNodeNode()                     {}
func (GEPIndex) llvmNodeNode()                   {}
func (GenericDINode) llvmNodeNode()              {}
func (GetElementPtrExpr) llvmNodeNode()          {}
func (GetElementPtrInst) llvmNodeNode()          {}
func (GetterField) llvmNodeNode()                {}
func (GlobalDecl) llvmNodeNode()                 {}
func (GlobalDef) llvmNodeNode()                  {}
func (GlobalIdent) llvmNodeNode()                {}
func (GlobalsField) llvmNodeNode()               {}
func (HeaderField) llvmNodeNode()                {}
func (ICmpExpr) llvmNodeNode()                   {}
func (ICmpInst) llvmNodeNode()                   {}
func (IFuncDef) llvmNodeNode()                   {}
func (IPred) llvmNodeNode()                      {}
func (IdentifierField) llvmNodeNode()            {}
func (Immutable) llvmNodeNode()                  {}
func (ImportsField) llvmNodeNode()               {}
func (InAlloca) llvmNodeNode()                   {}
func (InBounds) llvmNodeNode()                   {}
func (InRange) llvmNodeNode()                    {}
func (Inc) llvmNodeNode()                        {}
func (IncludePathField) llvmNodeNode()           {}
func (IndirectBrTerm) llvmNodeNode()             {}
func (InlineAsm) llvmNodeNode()                  {}
func (InlinedAtField) llvmNodeNode()             {}
func (InsertElementExpr) llvmNodeNode()          {}
func (InsertElementInst) llvmNodeNode()          {}
func (InsertValueExpr) llvmNodeNode()            {}
func (InsertValueInst) llvmNodeNode()            {}
func (InstMetadata) llvmNodeNode()               {}
func (IntConst) llvmNodeNode()                   {}
func (IntLit) llvmNodeNode()                     {}
func (IntToPtrExpr) llvmNodeNode()               {}
func (IntToPtrInst) llvmNodeNode()               {}
func (IntType) llvmNodeNode()                    {}
func (IntelDialect) llvmNodeNode()               {}
func (InvokeTerm) llvmNodeNode()                 {}
func (IsDefinitionField) llvmNodeNode()          {}
func (IsImplicitCodeField) llvmNodeNode()        {}
func (IsLocalField) llvmNodeNode()               {}
func (IsOptimizedField) llvmNodeNode()           {}
func (IsUnsignedField) llvmNodeNode()            {}
func (IsysrootField) llvmNodeNode()              {}
func (LShrExpr) llvmNodeNode()                   {}
func (LShrInst) llvmNodeNode()                   {}
func (Label) llvmNodeNode()                      {}
func (LabelIdent) llvmNodeNode()                 {}
func (LabelType) llvmNodeNode()                  {}
func (LandingPadInst) llvmNodeNode()             {}
func (LanguageField) llvmNodeNode()              {}
func (LineField) llvmNodeNode()                  {}
func (Linkage) llvmNodeNode()                    {}
func (LinkageNameField) llvmNodeNode()           {}
func (LoadInst) llvmNodeNode()                   {}
func (LocalDefInst) llvmNodeNode()               {}
func (LocalDefTerm) llvmNodeNode()               {}
func (LocalIdent) llvmNodeNode()                 {}
func (LowerBoundField) llvmNodeNode()            {}
func (MDFields) llvmNodeNode()                   {}
func (MDString) llvmNodeNode()                   {}
func (MDTuple) llvmNodeNode()                    {}
func (MMXType) llvmNodeNode()                    {}
func (MacrosField) llvmNodeNode()                {}
func (MetadataAttachment) llvmNodeNode()         {}
func (MetadataDef) llvmNodeNode()                {}
func (MetadataID) llvmNodeNode()                 {}
func (MetadataName) llvmNodeNode()               {}
func (MetadataType) llvmNodeNode()               {}
func (Module) llvmNodeNode()                     {}
func (ModuleAsm) llvmNodeNode()                  {}
func (MulExpr) llvmNodeNode()                    {}
func (MulInst) llvmNodeNode()                    {}
func (NameField) llvmNodeNode()                  {}
func (NameTableKind) llvmNodeNode()              {}
func (NameTableKindField) llvmNodeNode()         {}
func (NamedMetadataDef) llvmNodeNode()           {}
func (NamedType) llvmNodeNode()                  {}
func (NodesField) llvmNodeNode()                 {}
func (NoneConst) llvmNodeNode()                  {}
func (NullConst) llvmNodeNode()                  {}
func (NullLit) llvmNodeNode()                    {}
func (OffsetField) llvmNodeNode()                {}
func (OpaqueType) llvmNodeNode()                 {}
func (OperandBundle) llvmNodeNode()              {}
func (OperandBundles) llvmNodeNode()             {}
func (OperandsField) llvmNodeNode()              {}
func (OrExpr) llvmNodeNode()                     {}
func (OrInst) llvmNodeNode()                     {}
func (OverflowFlag) llvmNodeNode()               {}
func (PackedStructType) llvmNodeNode()           {}
func (Param) llvmNodeNode()                      {}
func (ParamAttribute) llvmNodeNode()             {}
func (Params) llvmNodeNode()                     {}
func (Personality) llvmNodeNode()                {}
func (PhiInst) llvmNodeNode()                    {}
func (PointerType) llvmNodeNode()                {}
func (Preemption) llvmNodeNode()                 {}
func (Prefix) llvmNodeNode()                     {}
func (ProducerField) llvmNodeNode()              {}
func (Prologue) llvmNodeNode()                   {}
func (PtrToIntExpr) llvmNodeNode()               {}
func (PtrToIntInst) llvmNodeNode()               {}
func (ResumeTerm) llvmNodeNode()                 {}
func (RetTerm) llvmNodeNode()                    {}
func (RetainedNodesField) llvmNodeNode()         {}
func (RetainedTypesField) llvmNodeNode()         {}
func (ReturnAttribute) llvmNodeNode()            {}
func (RuntimeLangField) llvmNodeNode()           {}
func (RuntimeVersionField) llvmNodeNode()        {}
func (SDivExpr) llvmNodeNode()                   {}
func (SDivInst) llvmNodeNode()                   {}
func (SExtExpr) llvmNodeNode()                   {}
func (SExtInst) llvmNodeNode()                   {}
func (SIToFPExpr) llvmNodeNode()                 {}
func (SIToFPInst) llvmNodeNode()                 {}
func (SRemExpr) llvmNodeNode()                   {}
func (SRemInst) llvmNodeNode()                   {}
func (ScopeField) llvmNodeNode()                 {}
func (ScopeLineField) llvmNodeNode()             {}
func (Section) llvmNodeNode()                    {}
func (SelectExpr) llvmNodeNode()                 {}
func (SelectInst) llvmNodeNode()                 {}
func (SelectionKind) llvmNodeNode()              {}
func (SetterField) llvmNodeNode()                {}
func (ShlExpr) llvmNodeNode()                    {}
func (ShlInst) llvmNodeNode()                    {}
func (ShuffleVectorExpr) llvmNodeNode()          {}
func (ShuffleVectorInst) llvmNodeNode()          {}
func (SideEffect) llvmNodeNode()                 {}
func (SizeField) llvmNodeNode()                  {}
func (SourceField) llvmNodeNode()                {}
func (SourceFilename) llvmNodeNode()             {}
func (SplitDebugFilenameField) llvmNodeNode()    {}
func (SplitDebugInliningField) llvmNodeNode()    {}
func (StackAlignment) llvmNodeNode()             {}
func (StoreInst) llvmNodeNode()                  {}
func (StringLit) llvmNodeNode()                  {}
func (StructConst) llvmNodeNode()                {}
func (StructType) llvmNodeNode()                 {}
func (SubExpr) llvmNodeNode()                    {}
func (SubInst) llvmNodeNode()                    {}
func (SwiftError) llvmNodeNode()                 {}
func (SwitchTerm) llvmNodeNode()                 {}
func (SyncScope) llvmNodeNode()                  {}
func (TLSModel) llvmNodeNode()                   {}
func (TagField) llvmNodeNode()                   {}
func (Tail) llvmNodeNode()                       {}
func (TargetDataLayout) llvmNodeNode()           {}
func (TargetTriple) llvmNodeNode()               {}
func (TemplateParamsField) llvmNodeNode()        {}
func (ThisAdjustmentField) llvmNodeNode()        {}
func (ThreadLocal) llvmNodeNode()                {}
func (ThrownTypesField) llvmNodeNode()           {}
func (TokenType) llvmNodeNode()                  {}
func (TruncExpr) llvmNodeNode()                  {}
func (TruncInst) llvmNodeNode()                  {}
func (TypeConst) llvmNodeNode()                  {}
func (TypeDef) llvmNodeNode()                    {}
func (TypeField) llvmNodeNode()                  {}
func (TypeMacinfoField) llvmNodeNode()           {}
func (TypeValue) llvmNodeNode()                  {}
func (TypesField) llvmNodeNode()                 {}
func (UDivExpr) llvmNodeNode()                   {}
func (UDivInst) llvmNodeNode()                   {}
func (UIToFPExpr) llvmNodeNode()                 {}
func (UIToFPInst) llvmNodeNode()                 {}
func (URemExpr) llvmNodeNode()                   {}
func (URemInst) llvmNodeNode()                   {}
func (UintLit) llvmNodeNode()                    {}
func (UndefConst) llvmNodeNode()                 {}
func (UnitField) llvmNodeNode()                  {}
func (UnnamedAddr) llvmNodeNode()                {}
func (UnreachableTerm) llvmNodeNode()            {}
func (UnwindTarget) llvmNodeNode()               {}
func (UseListOrder) llvmNodeNode()               {}
func (UseListOrderBB) llvmNodeNode()             {}
func (VAArgInst) llvmNodeNode()                  {}
func (ValueField) llvmNodeNode()                 {}
func (ValueIntField) llvmNodeNode()              {}
func (ValueStringField) llvmNodeNode()           {}
func (VarField) llvmNodeNode()                   {}
func (VectorConst) llvmNodeNode()                {}
func (VectorType) llvmNodeNode()                 {}
func (VirtualIndexField) llvmNodeNode()          {}
func (VirtualityField) llvmNodeNode()            {}
func (Visibility) llvmNodeNode()                 {}
func (VoidType) llvmNodeNode()                   {}
func (Volatile) llvmNodeNode()                   {}
func (VtableHolderField) llvmNodeNode()          {}
func (Weak) llvmNodeNode()                       {}
func (XorExpr) llvmNodeNode()                    {}
func (XorInst) llvmNodeNode()                    {}
func (ZExtExpr) llvmNodeNode()                   {}
func (ZExtInst) llvmNodeNode()                   {}
func (ZeroInitializerConst) llvmNodeNode()       {}

type Clause interface {
	LlvmNode
	clauseNode()
}

// clauseNode() ensures that only the following types can be
// assigned to Clause.
//
func (CatchClause) clauseNode()  {}
func (FilterClause) clauseNode() {}

type ConcreteType interface {
	LlvmNode
	concreteTypeNode()
}

// concreteTypeNode() ensures that only the following types can be
// assigned to ConcreteType.
//
func (ArrayType) concreteTypeNode()        {}
func (FloatType) concreteTypeNode()        {}
func (IntType) concreteTypeNode()          {}
func (LabelType) concreteTypeNode()        {}
func (MMXType) concreteTypeNode()          {}
func (NamedType) concreteTypeNode()        {}
func (PackedStructType) concreteTypeNode() {}
func (PointerType) concreteTypeNode()      {}
func (StructType) concreteTypeNode()       {}
func (TokenType) concreteTypeNode()        {}
func (VectorType) concreteTypeNode()       {}

type Constant interface {
	LlvmNode
	constantNode()
}

// constantNode() ensures that only the following types can be
// assigned to Constant.
//
func (AShrExpr) constantNode()             {}
func (AddExpr) constantNode()              {}
func (AddrSpaceCastExpr) constantNode()    {}
func (AndExpr) constantNode()              {}
func (ArrayConst) constantNode()           {}
func (BitCastExpr) constantNode()          {}
func (BlockAddressConst) constantNode()    {}
func (BoolConst) constantNode()            {}
func (CharArrayConst) constantNode()       {}
func (ExtractElementExpr) constantNode()   {}
func (ExtractValueExpr) constantNode()     {}
func (FAddExpr) constantNode()             {}
func (FCmpExpr) constantNode()             {}
func (FDivExpr) constantNode()             {}
func (FMulExpr) constantNode()             {}
func (FPExtExpr) constantNode()            {}
func (FPToSIExpr) constantNode()           {}
func (FPToUIExpr) constantNode()           {}
func (FPTruncExpr) constantNode()          {}
func (FRemExpr) constantNode()             {}
func (FSubExpr) constantNode()             {}
func (FloatConst) constantNode()           {}
func (GetElementPtrExpr) constantNode()    {}
func (GlobalIdent) constantNode()          {}
func (ICmpExpr) constantNode()             {}
func (InsertElementExpr) constantNode()    {}
func (InsertValueExpr) constantNode()      {}
func (IntConst) constantNode()             {}
func (IntToPtrExpr) constantNode()         {}
func (LShrExpr) constantNode()             {}
func (MulExpr) constantNode()              {}
func (NoneConst) constantNode()            {}
func (NullConst) constantNode()            {}
func (OrExpr) constantNode()               {}
func (PtrToIntExpr) constantNode()         {}
func (SDivExpr) constantNode()             {}
func (SExtExpr) constantNode()             {}
func (SIToFPExpr) constantNode()           {}
func (SRemExpr) constantNode()             {}
func (SelectExpr) constantNode()           {}
func (ShlExpr) constantNode()              {}
func (ShuffleVectorExpr) constantNode()    {}
func (StructConst) constantNode()          {}
func (SubExpr) constantNode()              {}
func (TruncExpr) constantNode()            {}
func (UDivExpr) constantNode()             {}
func (UIToFPExpr) constantNode()           {}
func (URemExpr) constantNode()             {}
func (UndefConst) constantNode()           {}
func (VectorConst) constantNode()          {}
func (XorExpr) constantNode()              {}
func (ZExtExpr) constantNode()             {}
func (ZeroInitializerConst) constantNode() {}

type ConstantExpr interface {
	LlvmNode
	constantExprNode()
}

// constantExprNode() ensures that only the following types can be
// assigned to ConstantExpr.
//
func (AShrExpr) constantExprNode()           {}
func (AddExpr) constantExprNode()            {}
func (AddrSpaceCastExpr) constantExprNode()  {}
func (AndExpr) constantExprNode()            {}
func (BitCastExpr) constantExprNode()        {}
func (ExtractElementExpr) constantExprNode() {}
func (ExtractValueExpr) constantExprNode()   {}
func (FAddExpr) constantExprNode()           {}
func (FCmpExpr) constantExprNode()           {}
func (FDivExpr) constantExprNode()           {}
func (FMulExpr) constantExprNode()           {}
func (FPExtExpr) constantExprNode()          {}
func (FPToSIExpr) constantExprNode()         {}
func (FPToUIExpr) constantExprNode()         {}
func (FPTruncExpr) constantExprNode()        {}
func (FRemExpr) constantExprNode()           {}
func (FSubExpr) constantExprNode()           {}
func (GetElementPtrExpr) constantExprNode()  {}
func (ICmpExpr) constantExprNode()           {}
func (InsertElementExpr) constantExprNode()  {}
func (InsertValueExpr) constantExprNode()    {}
func (IntToPtrExpr) constantExprNode()       {}
func (LShrExpr) constantExprNode()           {}
func (MulExpr) constantExprNode()            {}
func (OrExpr) constantExprNode()             {}
func (PtrToIntExpr) constantExprNode()       {}
func (SDivExpr) constantExprNode()           {}
func (SExtExpr) constantExprNode()           {}
func (SIToFPExpr) constantExprNode()         {}
func (SRemExpr) constantExprNode()           {}
func (SelectExpr) constantExprNode()         {}
func (ShlExpr) constantExprNode()            {}
func (ShuffleVectorExpr) constantExprNode()  {}
func (SubExpr) constantExprNode()            {}
func (TruncExpr) constantExprNode()          {}
func (UDivExpr) constantExprNode()           {}
func (UIToFPExpr) constantExprNode()         {}
func (URemExpr) constantExprNode()           {}
func (XorExpr) constantExprNode()            {}
func (ZExtExpr) constantExprNode()           {}

type DIBasicTypeField interface {
	LlvmNode
	dIBasicTypeFieldNode()
}

// dIBasicTypeFieldNode() ensures that only the following types can be
// assigned to DIBasicTypeField.
//
func (AlignField) dIBasicTypeFieldNode()    {}
func (EncodingField) dIBasicTypeFieldNode() {}
func (FlagsField) dIBasicTypeFieldNode()    {}
func (NameField) dIBasicTypeFieldNode()     {}
func (SizeField) dIBasicTypeFieldNode()     {}
func (TagField) dIBasicTypeFieldNode()      {}

type DICompileUnitField interface {
	LlvmNode
	dICompileUnitFieldNode()
}

// dICompileUnitFieldNode() ensures that only the following types can be
// assigned to DICompileUnitField.
//
func (DebugInfoForProfilingField) dICompileUnitFieldNode() {}
func (DwoIdField) dICompileUnitFieldNode()                 {}
func (EmissionKindField) dICompileUnitFieldNode()          {}
func (EnumsField) dICompileUnitFieldNode()                 {}
func (FileField) dICompileUnitFieldNode()                  {}
func (FlagsStringField) dICompileUnitFieldNode()           {}
func (GlobalsField) dICompileUnitFieldNode()               {}
func (ImportsField) dICompileUnitFieldNode()               {}
func (IsOptimizedField) dICompileUnitFieldNode()           {}
func (LanguageField) dICompileUnitFieldNode()              {}
func (MacrosField) dICompileUnitFieldNode()                {}
func (NameTableKindField) dICompileUnitFieldNode()         {}
func (ProducerField) dICompileUnitFieldNode()              {}
func (RetainedTypesField) dICompileUnitFieldNode()         {}
func (RuntimeVersionField) dICompileUnitFieldNode()        {}
func (SplitDebugFilenameField) dICompileUnitFieldNode()    {}
func (SplitDebugInliningField) dICompileUnitFieldNode()    {}

type DICompositeTypeField interface {
	LlvmNode
	dICompositeTypeFieldNode()
}

// dICompositeTypeFieldNode() ensures that only the following types can be
// assigned to DICompositeTypeField.
//
func (AlignField) dICompositeTypeFieldNode()          {}
func (BaseTypeField) dICompositeTypeFieldNode()       {}
func (DiscriminatorField) dICompositeTypeFieldNode()  {}
func (ElementsField) dICompositeTypeFieldNode()       {}
func (FileField) dICompositeTypeFieldNode()           {}
func (FlagsField) dICompositeTypeFieldNode()          {}
func (IdentifierField) dICompositeTypeFieldNode()     {}
func (LineField) dICompositeTypeFieldNode()           {}
func (NameField) dICompositeTypeFieldNode()           {}
func (OffsetField) dICompositeTypeFieldNode()         {}
func (RuntimeLangField) dICompositeTypeFieldNode()    {}
func (ScopeField) dICompositeTypeFieldNode()          {}
func (SizeField) dICompositeTypeFieldNode()           {}
func (TagField) dICompositeTypeFieldNode()            {}
func (TemplateParamsField) dICompositeTypeFieldNode() {}
func (VtableHolderField) dICompositeTypeFieldNode()   {}

type DIDerivedTypeField interface {
	LlvmNode
	dIDerivedTypeFieldNode()
}

// dIDerivedTypeFieldNode() ensures that only the following types can be
// assigned to DIDerivedTypeField.
//
func (AlignField) dIDerivedTypeFieldNode()             {}
func (BaseTypeField) dIDerivedTypeFieldNode()          {}
func (DwarfAddressSpaceField) dIDerivedTypeFieldNode() {}
func (ExtraDataField) dIDerivedTypeFieldNode()         {}
func (FileField) dIDerivedTypeFieldNode()              {}
func (FlagsField) dIDerivedTypeFieldNode()             {}
func (LineField) dIDerivedTypeFieldNode()              {}
func (NameField) dIDerivedTypeFieldNode()              {}
func (OffsetField) dIDerivedTypeFieldNode()            {}
func (ScopeField) dIDerivedTypeFieldNode()             {}
func (SizeField) dIDerivedTypeFieldNode()              {}
func (TagField) dIDerivedTypeFieldNode()               {}

type DIEnumeratorField interface {
	LlvmNode
	dIEnumeratorFieldNode()
}

// dIEnumeratorFieldNode() ensures that only the following types can be
// assigned to DIEnumeratorField.
//
func (IsUnsignedField) dIEnumeratorFieldNode() {}
func (NameField) dIEnumeratorFieldNode()       {}
func (ValueIntField) dIEnumeratorFieldNode()   {}

type DIExpressionField interface {
	LlvmNode
	dIExpressionFieldNode()
}

// dIExpressionFieldNode() ensures that only the following types can be
// assigned to DIExpressionField.
//
func (DwarfOp) dIExpressionFieldNode() {}
func (IntLit) dIExpressionFieldNode()  {}

type DIFileField interface {
	LlvmNode
	dIFileFieldNode()
}

// dIFileFieldNode() ensures that only the following types can be
// assigned to DIFileField.
//
func (ChecksumField) dIFileFieldNode()     {}
func (ChecksumkindField) dIFileFieldNode() {}
func (DirectoryField) dIFileFieldNode()    {}
func (FilenameField) dIFileFieldNode()     {}
func (SourceField) dIFileFieldNode()       {}

type DIGlobalVariableExpressionField interface {
	LlvmNode
	dIGlobalVariableExpressionFieldNode()
}

// dIGlobalVariableExpressionFieldNode() ensures that only the following types can be
// assigned to DIGlobalVariableExpressionField.
//
func (ExprField) dIGlobalVariableExpressionFieldNode() {}
func (VarField) dIGlobalVariableExpressionFieldNode()  {}

type DIGlobalVariableField interface {
	LlvmNode
	dIGlobalVariableFieldNode()
}

// dIGlobalVariableFieldNode() ensures that only the following types can be
// assigned to DIGlobalVariableField.
//
func (AlignField) dIGlobalVariableFieldNode()          {}
func (DeclarationField) dIGlobalVariableFieldNode()    {}
func (FileField) dIGlobalVariableFieldNode()           {}
func (IsDefinitionField) dIGlobalVariableFieldNode()   {}
func (IsLocalField) dIGlobalVariableFieldNode()        {}
func (LineField) dIGlobalVariableFieldNode()           {}
func (LinkageNameField) dIGlobalVariableFieldNode()    {}
func (NameField) dIGlobalVariableFieldNode()           {}
func (ScopeField) dIGlobalVariableFieldNode()          {}
func (TemplateParamsField) dIGlobalVariableFieldNode() {}
func (TypeField) dIGlobalVariableFieldNode()           {}

type DIImportedEntityField interface {
	LlvmNode
	dIImportedEntityFieldNode()
}

// dIImportedEntityFieldNode() ensures that only the following types can be
// assigned to DIImportedEntityField.
//
func (EntityField) dIImportedEntityFieldNode() {}
func (FileField) dIImportedEntityFieldNode()   {}
func (LineField) dIImportedEntityFieldNode()   {}
func (NameField) dIImportedEntityFieldNode()   {}
func (ScopeField) dIImportedEntityFieldNode()  {}
func (TagField) dIImportedEntityFieldNode()    {}

type DILabelField interface {
	LlvmNode
	dILabelFieldNode()
}

// dILabelFieldNode() ensures that only the following types can be
// assigned to DILabelField.
//
func (FileField) dILabelFieldNode()  {}
func (LineField) dILabelFieldNode()  {}
func (NameField) dILabelFieldNode()  {}
func (ScopeField) dILabelFieldNode() {}

type DILexicalBlockField interface {
	LlvmNode
	dILexicalBlockFieldNode()
}

// dILexicalBlockFieldNode() ensures that only the following types can be
// assigned to DILexicalBlockField.
//
func (ColumnField) dILexicalBlockFieldNode() {}
func (FileField) dILexicalBlockFieldNode()   {}
func (LineField) dILexicalBlockFieldNode()   {}
func (ScopeField) dILexicalBlockFieldNode()  {}

type DILexicalBlockFileField interface {
	LlvmNode
	dILexicalBlockFileFieldNode()
}

// dILexicalBlockFileFieldNode() ensures that only the following types can be
// assigned to DILexicalBlockFileField.
//
func (DiscriminatorIntField) dILexicalBlockFileFieldNode() {}
func (FileField) dILexicalBlockFileFieldNode()             {}
func (ScopeField) dILexicalBlockFileFieldNode()            {}

type DILocalVariableField interface {
	LlvmNode
	dILocalVariableFieldNode()
}

// dILocalVariableFieldNode() ensures that only the following types can be
// assigned to DILocalVariableField.
//
func (AlignField) dILocalVariableFieldNode() {}
func (ArgField) dILocalVariableFieldNode()   {}
func (FileField) dILocalVariableFieldNode()  {}
func (FlagsField) dILocalVariableFieldNode() {}
func (LineField) dILocalVariableFieldNode()  {}
func (NameField) dILocalVariableFieldNode()  {}
func (ScopeField) dILocalVariableFieldNode() {}
func (TypeField) dILocalVariableFieldNode()  {}

type DILocationField interface {
	LlvmNode
	dILocationFieldNode()
}

// dILocationFieldNode() ensures that only the following types can be
// assigned to DILocationField.
//
func (ColumnField) dILocationFieldNode()         {}
func (InlinedAtField) dILocationFieldNode()      {}
func (IsImplicitCodeField) dILocationFieldNode() {}
func (LineField) dILocationFieldNode()           {}
func (ScopeField) dILocationFieldNode()          {}

type DIMacroField interface {
	LlvmNode
	dIMacroFieldNode()
}

// dIMacroFieldNode() ensures that only the following types can be
// assigned to DIMacroField.
//
func (LineField) dIMacroFieldNode()        {}
func (NameField) dIMacroFieldNode()        {}
func (TypeMacinfoField) dIMacroFieldNode() {}
func (ValueStringField) dIMacroFieldNode() {}

type DIMacroFileField interface {
	LlvmNode
	dIMacroFileFieldNode()
}

// dIMacroFileFieldNode() ensures that only the following types can be
// assigned to DIMacroFileField.
//
func (FileField) dIMacroFileFieldNode()        {}
func (LineField) dIMacroFileFieldNode()        {}
func (NodesField) dIMacroFileFieldNode()       {}
func (TypeMacinfoField) dIMacroFileFieldNode() {}

type DIModuleField interface {
	LlvmNode
	dIModuleFieldNode()
}

// dIModuleFieldNode() ensures that only the following types can be
// assigned to DIModuleField.
//
func (ConfigMacrosField) dIModuleFieldNode() {}
func (IncludePathField) dIModuleFieldNode()  {}
func (IsysrootField) dIModuleFieldNode()     {}
func (NameField) dIModuleFieldNode()         {}
func (ScopeField) dIModuleFieldNode()        {}

type DINamespaceField interface {
	LlvmNode
	dINamespaceFieldNode()
}

// dINamespaceFieldNode() ensures that only the following types can be
// assigned to DINamespaceField.
//
func (ExportSymbolsField) dINamespaceFieldNode() {}
func (NameField) dINamespaceFieldNode()          {}
func (ScopeField) dINamespaceFieldNode()         {}

type DIObjCPropertyField interface {
	LlvmNode
	dIObjCPropertyFieldNode()
}

// dIObjCPropertyFieldNode() ensures that only the following types can be
// assigned to DIObjCPropertyField.
//
func (AttributesField) dIObjCPropertyFieldNode() {}
func (FileField) dIObjCPropertyFieldNode()       {}
func (GetterField) dIObjCPropertyFieldNode()     {}
func (LineField) dIObjCPropertyFieldNode()       {}
func (NameField) dIObjCPropertyFieldNode()       {}
func (SetterField) dIObjCPropertyFieldNode()     {}
func (TypeField) dIObjCPropertyFieldNode()       {}

type DISubprogramField interface {
	LlvmNode
	dISubprogramFieldNode()
}

// dISubprogramFieldNode() ensures that only the following types can be
// assigned to DISubprogramField.
//
func (ContainingTypeField) dISubprogramFieldNode() {}
func (DeclarationField) dISubprogramFieldNode()    {}
func (FileField) dISubprogramFieldNode()           {}
func (FlagsField) dISubprogramFieldNode()          {}
func (IsDefinitionField) dISubprogramFieldNode()   {}
func (IsLocalField) dISubprogramFieldNode()        {}
func (IsOptimizedField) dISubprogramFieldNode()    {}
func (LineField) dISubprogramFieldNode()           {}
func (LinkageNameField) dISubprogramFieldNode()    {}
func (NameField) dISubprogramFieldNode()           {}
func (RetainedNodesField) dISubprogramFieldNode()  {}
func (ScopeField) dISubprogramFieldNode()          {}
func (ScopeLineField) dISubprogramFieldNode()      {}
func (TemplateParamsField) dISubprogramFieldNode() {}
func (ThisAdjustmentField) dISubprogramFieldNode() {}
func (ThrownTypesField) dISubprogramFieldNode()    {}
func (TypeField) dISubprogramFieldNode()           {}
func (UnitField) dISubprogramFieldNode()           {}
func (VirtualIndexField) dISubprogramFieldNode()   {}
func (VirtualityField) dISubprogramFieldNode()     {}

type DISubrangeField interface {
	LlvmNode
	dISubrangeFieldNode()
}

// dISubrangeFieldNode() ensures that only the following types can be
// assigned to DISubrangeField.
//
func (CountField) dISubrangeFieldNode()      {}
func (LowerBoundField) dISubrangeFieldNode() {}

type DISubroutineTypeField interface {
	LlvmNode
	dISubroutineTypeFieldNode()
}

// dISubroutineTypeFieldNode() ensures that only the following types can be
// assigned to DISubroutineTypeField.
//
func (CCField) dISubroutineTypeFieldNode()    {}
func (FlagsField) dISubroutineTypeFieldNode() {}
func (TypesField) dISubroutineTypeFieldNode() {}

type DITemplateTypeParameterField interface {
	LlvmNode
	dITemplateTypeParameterFieldNode()
}

// dITemplateTypeParameterFieldNode() ensures that only the following types can be
// assigned to DITemplateTypeParameterField.
//
func (NameField) dITemplateTypeParameterFieldNode() {}
func (TypeField) dITemplateTypeParameterFieldNode() {}

type DITemplateValueParameterField interface {
	LlvmNode
	dITemplateValueParameterFieldNode()
}

// dITemplateValueParameterFieldNode() ensures that only the following types can be
// assigned to DITemplateValueParameterField.
//
func (NameField) dITemplateValueParameterFieldNode()  {}
func (TagField) dITemplateValueParameterFieldNode()   {}
func (TypeField) dITemplateValueParameterFieldNode()  {}
func (ValueField) dITemplateValueParameterFieldNode() {}

type FirstClassType interface {
	LlvmNode
	firstClassTypeNode()
}

// firstClassTypeNode() ensures that only the following types can be
// assigned to FirstClassType.
//
func (ArrayType) firstClassTypeNode()        {}
func (FloatType) firstClassTypeNode()        {}
func (IntType) firstClassTypeNode()          {}
func (LabelType) firstClassTypeNode()        {}
func (MMXType) firstClassTypeNode()          {}
func (MetadataType) firstClassTypeNode()     {}
func (NamedType) firstClassTypeNode()        {}
func (PackedStructType) firstClassTypeNode() {}
func (PointerType) firstClassTypeNode()      {}
func (StructType) firstClassTypeNode()       {}
func (TokenType) firstClassTypeNode()        {}
func (VectorType) firstClassTypeNode()       {}

type FuncAttr interface {
	LlvmNode
	funcAttrNode()
}

// funcAttrNode() ensures that only the following types can be
// assigned to FuncAttr.
//
func (AlignPair) funcAttrNode()      {}
func (AlignStackPair) funcAttrNode() {}
func (AllocSize) funcAttrNode()      {}
func (AttrGroupID) funcAttrNode()    {}
func (AttrPair) funcAttrNode()       {}
func (AttrString) funcAttrNode()     {}
func (FuncAttribute) funcAttrNode()  {}
func (StackAlignment) funcAttrNode() {}

type GenericDINodeField interface {
	LlvmNode
	genericDINodeFieldNode()
}

// genericDINodeFieldNode() ensures that only the following types can be
// assigned to GenericDINodeField.
//
func (HeaderField) genericDINodeFieldNode()   {}
func (OperandsField) genericDINodeFieldNode() {}
func (TagField) genericDINodeFieldNode()      {}

type GlobalAttr interface {
	LlvmNode
	globalAttrNode()
}

// globalAttrNode() ensures that only the following types can be
// assigned to GlobalAttr.
//
func (Alignment) globalAttrNode()          {}
func (Comdat) globalAttrNode()             {}
func (MetadataAttachment) globalAttrNode() {}
func (Section) globalAttrNode()            {}

type IndirectSymbolDef interface {
	LlvmNode
	indirectSymbolDefNode()
}

// indirectSymbolDefNode() ensures that only the following types can be
// assigned to IndirectSymbolDef.
//
func (AliasDef) indirectSymbolDefNode() {}
func (IFuncDef) indirectSymbolDefNode() {}

type Instruction interface {
	LlvmNode
	instructionNode()
}

// instructionNode() ensures that only the following types can be
// assigned to Instruction.
//
func (AShrInst) instructionNode()           {}
func (AddInst) instructionNode()            {}
func (AddrSpaceCastInst) instructionNode()  {}
func (AllocaInst) instructionNode()         {}
func (AndInst) instructionNode()            {}
func (AtomicRMWInst) instructionNode()      {}
func (BitCastInst) instructionNode()        {}
func (CallInst) instructionNode()           {}
func (CatchPadInst) instructionNode()       {}
func (CleanupPadInst) instructionNode()     {}
func (CmpXchgInst) instructionNode()        {}
func (ExtractElementInst) instructionNode() {}
func (ExtractValueInst) instructionNode()   {}
func (FAddInst) instructionNode()           {}
func (FCmpInst) instructionNode()           {}
func (FDivInst) instructionNode()           {}
func (FMulInst) instructionNode()           {}
func (FPExtInst) instructionNode()          {}
func (FPToSIInst) instructionNode()         {}
func (FPToUIInst) instructionNode()         {}
func (FPTruncInst) instructionNode()        {}
func (FRemInst) instructionNode()           {}
func (FSubInst) instructionNode()           {}
func (FenceInst) instructionNode()          {}
func (GetElementPtrInst) instructionNode()  {}
func (ICmpInst) instructionNode()           {}
func (InsertElementInst) instructionNode()  {}
func (InsertValueInst) instructionNode()    {}
func (IntToPtrInst) instructionNode()       {}
func (LShrInst) instructionNode()           {}
func (LandingPadInst) instructionNode()     {}
func (LoadInst) instructionNode()           {}
func (LocalDefInst) instructionNode()       {}
func (MulInst) instructionNode()            {}
func (OrInst) instructionNode()             {}
func (PhiInst) instructionNode()            {}
func (PtrToIntInst) instructionNode()       {}
func (SDivInst) instructionNode()           {}
func (SExtInst) instructionNode()           {}
func (SIToFPInst) instructionNode()         {}
func (SRemInst) instructionNode()           {}
func (SelectInst) instructionNode()         {}
func (ShlInst) instructionNode()            {}
func (ShuffleVectorInst) instructionNode()  {}
func (StoreInst) instructionNode()          {}
func (SubInst) instructionNode()            {}
func (TruncInst) instructionNode()          {}
func (UDivInst) instructionNode()           {}
func (UIToFPInst) instructionNode()         {}
func (URemInst) instructionNode()           {}
func (VAArgInst) instructionNode()          {}
func (XorInst) instructionNode()            {}
func (ZExtInst) instructionNode()           {}

type MDField interface {
	LlvmNode
	mDFieldNode()
}

// mDFieldNode() ensures that only the following types can be
// assigned to MDField.
//
func (DIBasicType) mDFieldNode()                {}
func (DICompileUnit) mDFieldNode()              {}
func (DICompositeType) mDFieldNode()            {}
func (DIDerivedType) mDFieldNode()              {}
func (DIEnumerator) mDFieldNode()               {}
func (DIExpression) mDFieldNode()               {}
func (DIFile) mDFieldNode()                     {}
func (DIGlobalVariable) mDFieldNode()           {}
func (DIGlobalVariableExpression) mDFieldNode() {}
func (DIImportedEntity) mDFieldNode()           {}
func (DILabel) mDFieldNode()                    {}
func (DILexicalBlock) mDFieldNode()             {}
func (DILexicalBlockFile) mDFieldNode()         {}
func (DILocalVariable) mDFieldNode()            {}
func (DILocation) mDFieldNode()                 {}
func (DIMacro) mDFieldNode()                    {}
func (DIMacroFile) mDFieldNode()                {}
func (DIModule) mDFieldNode()                   {}
func (DINamespace) mDFieldNode()                {}
func (DIObjCProperty) mDFieldNode()             {}
func (DISubprogram) mDFieldNode()               {}
func (DISubrange) mDFieldNode()                 {}
func (DISubroutineType) mDFieldNode()           {}
func (DITemplateTypeParameter) mDFieldNode()    {}
func (DITemplateValueParameter) mDFieldNode()   {}
func (GenericDINode) mDFieldNode()              {}
func (MDString) mDFieldNode()                   {}
func (MDTuple) mDFieldNode()                    {}
func (MetadataID) mDFieldNode()                 {}
func (NullLit) mDFieldNode()                    {}
func (TypeValue) mDFieldNode()                  {}

type MDFieldOrInt interface {
	LlvmNode
	mDFieldOrIntNode()
}

// mDFieldOrIntNode() ensures that only the following types can be
// assigned to MDFieldOrInt.
//
func (DIBasicType) mDFieldOrIntNode()                {}
func (DICompileUnit) mDFieldOrIntNode()              {}
func (DICompositeType) mDFieldOrIntNode()            {}
func (DIDerivedType) mDFieldOrIntNode()              {}
func (DIEnumerator) mDFieldOrIntNode()               {}
func (DIExpression) mDFieldOrIntNode()               {}
func (DIFile) mDFieldOrIntNode()                     {}
func (DIGlobalVariable) mDFieldOrIntNode()           {}
func (DIGlobalVariableExpression) mDFieldOrIntNode() {}
func (DIImportedEntity) mDFieldOrIntNode()           {}
func (DILabel) mDFieldOrIntNode()                    {}
func (DILexicalBlock) mDFieldOrIntNode()             {}
func (DILexicalBlockFile) mDFieldOrIntNode()         {}
func (DILocalVariable) mDFieldOrIntNode()            {}
func (DILocation) mDFieldOrIntNode()                 {}
func (DIMacro) mDFieldOrIntNode()                    {}
func (DIMacroFile) mDFieldOrIntNode()                {}
func (DIModule) mDFieldOrIntNode()                   {}
func (DINamespace) mDFieldOrIntNode()                {}
func (DIObjCProperty) mDFieldOrIntNode()             {}
func (DISubprogram) mDFieldOrIntNode()               {}
func (DISubrange) mDFieldOrIntNode()                 {}
func (DISubroutineType) mDFieldOrIntNode()           {}
func (DITemplateTypeParameter) mDFieldOrIntNode()    {}
func (DITemplateValueParameter) mDFieldOrIntNode()   {}
func (GenericDINode) mDFieldOrIntNode()              {}
func (IntLit) mDFieldOrIntNode()                     {}
func (MDString) mDFieldOrIntNode()                   {}
func (MDTuple) mDFieldOrIntNode()                    {}
func (MetadataID) mDFieldOrIntNode()                 {}
func (NullLit) mDFieldOrIntNode()                    {}
func (TypeValue) mDFieldOrIntNode()                  {}

type MDNode interface {
	LlvmNode
	mDNodeNode()
}

// mDNodeNode() ensures that only the following types can be
// assigned to MDNode.
//
func (DIBasicType) mDNodeNode()                {}
func (DICompileUnit) mDNodeNode()              {}
func (DICompositeType) mDNodeNode()            {}
func (DIDerivedType) mDNodeNode()              {}
func (DIEnumerator) mDNodeNode()               {}
func (DIExpression) mDNodeNode()               {}
func (DIFile) mDNodeNode()                     {}
func (DIGlobalVariable) mDNodeNode()           {}
func (DIGlobalVariableExpression) mDNodeNode() {}
func (DIImportedEntity) mDNodeNode()           {}
func (DILabel) mDNodeNode()                    {}
func (DILexicalBlock) mDNodeNode()             {}
func (DILexicalBlockFile) mDNodeNode()         {}
func (DILocalVariable) mDNodeNode()            {}
func (DILocation) mDNodeNode()                 {}
func (DIMacro) mDNodeNode()                    {}
func (DIMacroFile) mDNodeNode()                {}
func (DIModule) mDNodeNode()                   {}
func (DINamespace) mDNodeNode()                {}
func (DIObjCProperty) mDNodeNode()             {}
func (DISubprogram) mDNodeNode()               {}
func (DISubrange) mDNodeNode()                 {}
func (DISubroutineType) mDNodeNode()           {}
func (DITemplateTypeParameter) mDNodeNode()    {}
func (DITemplateValueParameter) mDNodeNode()   {}
func (GenericDINode) mDNodeNode()              {}
func (MDTuple) mDNodeNode()                    {}
func (MetadataID) mDNodeNode()                 {}

type Metadata interface {
	LlvmNode
	metadataNode()
}

// metadataNode() ensures that only the following types can be
// assigned to Metadata.
//
func (DIBasicType) metadataNode()                {}
func (DICompileUnit) metadataNode()              {}
func (DICompositeType) metadataNode()            {}
func (DIDerivedType) metadataNode()              {}
func (DIEnumerator) metadataNode()               {}
func (DIExpression) metadataNode()               {}
func (DIFile) metadataNode()                     {}
func (DIGlobalVariable) metadataNode()           {}
func (DIGlobalVariableExpression) metadataNode() {}
func (DIImportedEntity) metadataNode()           {}
func (DILabel) metadataNode()                    {}
func (DILexicalBlock) metadataNode()             {}
func (DILexicalBlockFile) metadataNode()         {}
func (DILocalVariable) metadataNode()            {}
func (DILocation) metadataNode()                 {}
func (DIMacro) metadataNode()                    {}
func (DIMacroFile) metadataNode()                {}
func (DIModule) metadataNode()                   {}
func (DINamespace) metadataNode()                {}
func (DIObjCProperty) metadataNode()             {}
func (DISubprogram) metadataNode()               {}
func (DISubrange) metadataNode()                 {}
func (DISubroutineType) metadataNode()           {}
func (DITemplateTypeParameter) metadataNode()    {}
func (DITemplateValueParameter) metadataNode()   {}
func (GenericDINode) metadataNode()              {}
func (MDString) metadataNode()                   {}
func (MDTuple) metadataNode()                    {}
func (MetadataID) metadataNode()                 {}
func (TypeValue) metadataNode()                  {}

type MetadataNode interface {
	LlvmNode
	metadataNodeNode()
}

// metadataNodeNode() ensures that only the following types can be
// assigned to MetadataNode.
//
func (DIExpression) metadataNodeNode() {}
func (MetadataID) metadataNodeNode()   {}

type ParamAttr interface {
	LlvmNode
	paramAttrNode()
}

// paramAttrNode() ensures that only the following types can be
// assigned to ParamAttr.
//
func (Alignment) paramAttrNode()       {}
func (AttrPair) paramAttrNode()        {}
func (AttrString) paramAttrNode()      {}
func (Dereferenceable) paramAttrNode() {}
func (ParamAttribute) paramAttrNode()  {}

type ReturnAttr interface {
	LlvmNode
	returnAttrNode()
}

// returnAttrNode() ensures that only the following types can be
// assigned to ReturnAttr.
//
func (Alignment) returnAttrNode()       {}
func (Dereferenceable) returnAttrNode() {}
func (ReturnAttribute) returnAttrNode() {}

type SpecializedMDNode interface {
	LlvmNode
	specializedMDNodeNode()
}

// specializedMDNodeNode() ensures that only the following types can be
// assigned to SpecializedMDNode.
//
func (DIBasicType) specializedMDNodeNode()                {}
func (DICompileUnit) specializedMDNodeNode()              {}
func (DICompositeType) specializedMDNodeNode()            {}
func (DIDerivedType) specializedMDNodeNode()              {}
func (DIEnumerator) specializedMDNodeNode()               {}
func (DIExpression) specializedMDNodeNode()               {}
func (DIFile) specializedMDNodeNode()                     {}
func (DIGlobalVariable) specializedMDNodeNode()           {}
func (DIGlobalVariableExpression) specializedMDNodeNode() {}
func (DIImportedEntity) specializedMDNodeNode()           {}
func (DILabel) specializedMDNodeNode()                    {}
func (DILexicalBlock) specializedMDNodeNode()             {}
func (DILexicalBlockFile) specializedMDNodeNode()         {}
func (DILocalVariable) specializedMDNodeNode()            {}
func (DILocation) specializedMDNodeNode()                 {}
func (DIMacro) specializedMDNodeNode()                    {}
func (DIMacroFile) specializedMDNodeNode()                {}
func (DIModule) specializedMDNodeNode()                   {}
func (DINamespace) specializedMDNodeNode()                {}
func (DIObjCProperty) specializedMDNodeNode()             {}
func (DISubprogram) specializedMDNodeNode()               {}
func (DISubrange) specializedMDNodeNode()                 {}
func (DISubroutineType) specializedMDNodeNode()           {}
func (DITemplateTypeParameter) specializedMDNodeNode()    {}
func (DITemplateValueParameter) specializedMDNodeNode()   {}
func (GenericDINode) specializedMDNodeNode()              {}

type TargetDef interface {
	LlvmNode
	targetDefNode()
}

// targetDefNode() ensures that only the following types can be
// assigned to TargetDef.
//
func (TargetDataLayout) targetDefNode() {}
func (TargetTriple) targetDefNode()     {}

type Terminator interface {
	LlvmNode
	terminatorNode()
}

// terminatorNode() ensures that only the following types can be
// assigned to Terminator.
//
func (BrTerm) terminatorNode()          {}
func (CatchRetTerm) terminatorNode()    {}
func (CatchSwitchTerm) terminatorNode() {}
func (CleanupRetTerm) terminatorNode()  {}
func (CondBrTerm) terminatorNode()      {}
func (IndirectBrTerm) terminatorNode()  {}
func (InvokeTerm) terminatorNode()      {}
func (LocalDefTerm) terminatorNode()    {}
func (ResumeTerm) terminatorNode()      {}
func (RetTerm) terminatorNode()         {}
func (SwitchTerm) terminatorNode()      {}
func (UnreachableTerm) terminatorNode() {}

type TopLevelEntity interface {
	LlvmNode
	topLevelEntityNode()
}

// topLevelEntityNode() ensures that only the following types can be
// assigned to TopLevelEntity.
//
func (AliasDef) topLevelEntityNode()         {}
func (AttrGroupDef) topLevelEntityNode()     {}
func (ComdatDef) topLevelEntityNode()        {}
func (FuncDecl) topLevelEntityNode()         {}
func (FuncDef) topLevelEntityNode()          {}
func (GlobalDecl) topLevelEntityNode()       {}
func (GlobalDef) topLevelEntityNode()        {}
func (IFuncDef) topLevelEntityNode()         {}
func (MetadataDef) topLevelEntityNode()      {}
func (ModuleAsm) topLevelEntityNode()        {}
func (NamedMetadataDef) topLevelEntityNode() {}
func (SourceFilename) topLevelEntityNode()   {}
func (TargetDataLayout) topLevelEntityNode() {}
func (TargetTriple) topLevelEntityNode()     {}
func (TypeDef) topLevelEntityNode()          {}
func (UseListOrder) topLevelEntityNode()     {}
func (UseListOrderBB) topLevelEntityNode()   {}

type Type interface {
	LlvmNode
	typeNode()
}

// typeNode() ensures that only the following types can be
// assigned to Type.
//
func (ArrayType) typeNode()        {}
func (FloatType) typeNode()        {}
func (FuncType) typeNode()         {}
func (IntType) typeNode()          {}
func (LabelType) typeNode()        {}
func (MMXType) typeNode()          {}
func (MetadataType) typeNode()     {}
func (NamedType) typeNode()        {}
func (PackedStructType) typeNode() {}
func (PointerType) typeNode()      {}
func (StructType) typeNode()       {}
func (TokenType) typeNode()        {}
func (VectorType) typeNode()       {}
func (VoidType) typeNode()         {}

type Value interface {
	LlvmNode
	valueNode()
}

// valueNode() ensures that only the following types can be
// assigned to Value.
//
func (AShrExpr) valueNode()             {}
func (AddExpr) valueNode()              {}
func (AddrSpaceCastExpr) valueNode()    {}
func (AndExpr) valueNode()              {}
func (ArrayConst) valueNode()           {}
func (BitCastExpr) valueNode()          {}
func (BlockAddressConst) valueNode()    {}
func (BoolConst) valueNode()            {}
func (CharArrayConst) valueNode()       {}
func (ExtractElementExpr) valueNode()   {}
func (ExtractValueExpr) valueNode()     {}
func (FAddExpr) valueNode()             {}
func (FCmpExpr) valueNode()             {}
func (FDivExpr) valueNode()             {}
func (FMulExpr) valueNode()             {}
func (FPExtExpr) valueNode()            {}
func (FPToSIExpr) valueNode()           {}
func (FPToUIExpr) valueNode()           {}
func (FPTruncExpr) valueNode()          {}
func (FRemExpr) valueNode()             {}
func (FSubExpr) valueNode()             {}
func (FloatConst) valueNode()           {}
func (GetElementPtrExpr) valueNode()    {}
func (GlobalIdent) valueNode()          {}
func (ICmpExpr) valueNode()             {}
func (InlineAsm) valueNode()            {}
func (InsertElementExpr) valueNode()    {}
func (InsertValueExpr) valueNode()      {}
func (IntConst) valueNode()             {}
func (IntToPtrExpr) valueNode()         {}
func (LShrExpr) valueNode()             {}
func (LocalIdent) valueNode()           {}
func (MulExpr) valueNode()              {}
func (NoneConst) valueNode()            {}
func (NullConst) valueNode()            {}
func (OrExpr) valueNode()               {}
func (PtrToIntExpr) valueNode()         {}
func (SDivExpr) valueNode()             {}
func (SExtExpr) valueNode()             {}
func (SIToFPExpr) valueNode()           {}
func (SRemExpr) valueNode()             {}
func (SelectExpr) valueNode()           {}
func (ShlExpr) valueNode()              {}
func (ShuffleVectorExpr) valueNode()    {}
func (StructConst) valueNode()          {}
func (SubExpr) valueNode()              {}
func (TruncExpr) valueNode()            {}
func (UDivExpr) valueNode()             {}
func (UIToFPExpr) valueNode()           {}
func (URemExpr) valueNode()             {}
func (UndefConst) valueNode()           {}
func (VectorConst) valueNode()          {}
func (XorExpr) valueNode()              {}
func (ZExtExpr) valueNode()             {}
func (ZeroInitializerConst) valueNode() {}

type ValueInstruction interface {
	LlvmNode
	valueInstructionNode()
}

// valueInstructionNode() ensures that only the following types can be
// assigned to ValueInstruction.
//
func (AShrInst) valueInstructionNode()           {}
func (AddInst) valueInstructionNode()            {}
func (AddrSpaceCastInst) valueInstructionNode()  {}
func (AllocaInst) valueInstructionNode()         {}
func (AndInst) valueInstructionNode()            {}
func (AtomicRMWInst) valueInstructionNode()      {}
func (BitCastInst) valueInstructionNode()        {}
func (CallInst) valueInstructionNode()           {}
func (CatchPadInst) valueInstructionNode()       {}
func (CleanupPadInst) valueInstructionNode()     {}
func (CmpXchgInst) valueInstructionNode()        {}
func (ExtractElementInst) valueInstructionNode() {}
func (ExtractValueInst) valueInstructionNode()   {}
func (FAddInst) valueInstructionNode()           {}
func (FCmpInst) valueInstructionNode()           {}
func (FDivInst) valueInstructionNode()           {}
func (FMulInst) valueInstructionNode()           {}
func (FPExtInst) valueInstructionNode()          {}
func (FPToSIInst) valueInstructionNode()         {}
func (FPToUIInst) valueInstructionNode()         {}
func (FPTruncInst) valueInstructionNode()        {}
func (FRemInst) valueInstructionNode()           {}
func (FSubInst) valueInstructionNode()           {}
func (GetElementPtrInst) valueInstructionNode()  {}
func (ICmpInst) valueInstructionNode()           {}
func (InsertElementInst) valueInstructionNode()  {}
func (InsertValueInst) valueInstructionNode()    {}
func (IntToPtrInst) valueInstructionNode()       {}
func (LShrInst) valueInstructionNode()           {}
func (LandingPadInst) valueInstructionNode()     {}
func (LoadInst) valueInstructionNode()           {}
func (MulInst) valueInstructionNode()            {}
func (OrInst) valueInstructionNode()             {}
func (PhiInst) valueInstructionNode()            {}
func (PtrToIntInst) valueInstructionNode()       {}
func (SDivInst) valueInstructionNode()           {}
func (SExtInst) valueInstructionNode()           {}
func (SIToFPInst) valueInstructionNode()         {}
func (SRemInst) valueInstructionNode()           {}
func (SelectInst) valueInstructionNode()         {}
func (ShlInst) valueInstructionNode()            {}
func (ShuffleVectorInst) valueInstructionNode()  {}
func (SubInst) valueInstructionNode()            {}
func (TruncInst) valueInstructionNode()          {}
func (UDivInst) valueInstructionNode()           {}
func (UIToFPInst) valueInstructionNode()         {}
func (URemInst) valueInstructionNode()           {}
func (VAArgInst) valueInstructionNode()          {}
func (XorInst) valueInstructionNode()            {}
func (ZExtInst) valueInstructionNode()           {}

type ValueTerminator interface {
	LlvmNode
	valueTerminatorNode()
}

// valueTerminatorNode() ensures that only the following types can be
// assigned to ValueTerminator.
//
func (CatchSwitchTerm) valueTerminatorNode() {}
func (InvokeTerm) valueTerminatorNode()      {}

// Types.

type AShrExpr struct {
	Node
}

func (n AShrExpr) Exact() *Exact {
	if child := n.Child(selector.Exact); child != nil {
		return &Exact{child}
	}
	return nil
}

func (n AShrExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n AShrExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type AShrInst struct {
	Node
}

func (n AShrInst) Exact() *Exact {
	if child := n.Child(selector.Exact); child != nil {
		return &Exact{child}
	}
	return nil
}

func (n AShrInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n AShrInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n AShrInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type AddExpr struct {
	Node
}

func (n AddExpr) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var result []OverflowFlag = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, OverflowFlag{node})
	}
	return result
}

func (n AddExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n AddExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type AddInst struct {
	Node
}

func (n AddInst) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var result []OverflowFlag = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, OverflowFlag{node})
	}
	return result
}

func (n AddInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n AddInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n AddInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type AddrSpace struct {
	Node
}

func (n AddrSpace) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type AddrSpaceCastExpr struct {
	Node
}

func (n AddrSpaceCastExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n AddrSpaceCastExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type AddrSpaceCastInst struct {
	Node
}

func (n AddrSpaceCastInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n AddrSpaceCastInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n AddrSpaceCastInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type AliasDef struct {
	Node
}

func (n AliasDef) Name() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n AliasDef) ExternLinkage() *ExternLinkage {
	if child := n.Child(selector.ExternLinkage); child != nil {
		return &ExternLinkage{child}
	}
	return nil
}

func (n AliasDef) Linkage() *Linkage {
	if child := n.Child(selector.Linkage); child != nil {
		return &Linkage{child}
	}
	return nil
}

func (n AliasDef) Preemption() *Preemption {
	if child := n.Child(selector.Preemption); child != nil {
		return &Preemption{child}
	}
	return nil
}

func (n AliasDef) Visibility() *Visibility {
	if child := n.Child(selector.Visibility); child != nil {
		return &Visibility{child}
	}
	return nil
}

func (n AliasDef) DLLStorageClass() *DLLStorageClass {
	if child := n.Child(selector.DLLStorageClass); child != nil {
		return &DLLStorageClass{child}
	}
	return nil
}

func (n AliasDef) ThreadLocal() *ThreadLocal {
	if child := n.Child(selector.ThreadLocal); child != nil {
		return &ThreadLocal{child}
	}
	return nil
}

func (n AliasDef) UnnamedAddr() *UnnamedAddr {
	if child := n.Child(selector.UnnamedAddr); child != nil {
		return &UnnamedAddr{child}
	}
	return nil
}

func (n AliasDef) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n AliasDef) AliaseeType() Type {
	return ToLlvmNode(n.Child(selector.Type).Next(selector.Type)).(Type)
}

func (n AliasDef) Aliasee() Constant {
	return ToLlvmNode(n.Child(selector.GlobalIdent).Next(selector.Constant)).(Constant)
}

type AlignField struct {
	Node
}

func (n AlignField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type AlignPair struct {
	Node
}

func (n AlignPair) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type AlignStack struct {
	Node
}

type AlignStackPair struct {
	Node
}

func (n AlignStackPair) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type Alignment struct {
	Node
}

func (n Alignment) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type AllocSize struct {
	Node
}

func (n AllocSize) ElemSize() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

func (n AllocSize) N() *UintLit {
	if child := n.Child(selector.UintLit).Next(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type AllocaInst struct {
	Node
}

func (n AllocaInst) InAlloca() *InAlloca {
	if child := n.Child(selector.InAlloca); child != nil {
		return &InAlloca{child}
	}
	return nil
}

func (n AllocaInst) SwiftError() *SwiftError {
	if child := n.Child(selector.SwiftError); child != nil {
		return &SwiftError{child}
	}
	return nil
}

func (n AllocaInst) ElemType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n AllocaInst) NElems() *TypeValue {
	if child := n.Child(selector.TypeValue); child != nil {
		return &TypeValue{child}
	}
	return nil
}

func (n AllocaInst) Alignment() *Alignment {
	if child := n.Child(selector.Alignment); child != nil {
		return &Alignment{child}
	}
	return nil
}

func (n AllocaInst) AddrSpace() *AddrSpace {
	if child := n.Child(selector.AddrSpace); child != nil {
		return &AddrSpace{child}
	}
	return nil
}

func (n AllocaInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type AndExpr struct {
	Node
}

func (n AndExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n AndExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type AndInst struct {
	Node
}

func (n AndInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n AndInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n AndInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type Arg struct {
	Node
}

func (n Arg) Typ() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.ArrayType, ll.FloatType, ll.IntType, ll.LabelType, ll.MMXType, ll.MetadataType, ll.NamedType, ll.PackedStructType, ll.PointerType, ll.StructType, ll.TokenType, ll.VectorType))).(LlvmNode)
}

func (n Arg) Attrs() []ParamAttr {
	nodes := n.Children(selector.ParamAttr)
	var result []ParamAttr = make([]ParamAttr, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(ParamAttr))
	}
	return result
}

func (n Arg) Val() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.AShrExpr, ll.AddExpr, ll.AddrSpaceCastExpr, ll.AndExpr, ll.ArrayConst, ll.BitCastExpr, ll.BlockAddressConst, ll.BoolConst, ll.CharArrayConst, ll.DIBasicType, ll.DICompileUnit, ll.DICompositeType, ll.DIDerivedType, ll.DIEnumerator, ll.DIExpression, ll.DIFile, ll.DIGlobalVariable, ll.DIGlobalVariableExpression, ll.DIImportedEntity, ll.DILabel, ll.DILexicalBlock, ll.DILexicalBlockFile, ll.DILocalVariable, ll.DILocation, ll.DIMacro, ll.DIMacroFile, ll.DIModule, ll.DINamespace, ll.DIObjCProperty, ll.DISubprogram, ll.DISubrange, ll.DISubroutineType, ll.DITemplateTypeParameter, ll.DITemplateValueParameter, ll.ExtractElementExpr, ll.ExtractValueExpr, ll.FAddExpr, ll.FCmpExpr, ll.FDivExpr, ll.FMulExpr, ll.FPExtExpr, ll.FPToSIExpr, ll.FPToUIExpr, ll.FPTruncExpr, ll.FRemExpr, ll.FSubExpr, ll.FloatConst, ll.GenericDINode, ll.GetElementPtrExpr, ll.GlobalIdent, ll.ICmpExpr, ll.InlineAsm, ll.InsertElementExpr, ll.InsertValueExpr, ll.IntConst, ll.IntToPtrExpr, ll.LShrExpr, ll.LocalIdent, ll.MDString, ll.MDTuple, ll.MetadataID, ll.MulExpr, ll.NoneConst, ll.NullConst, ll.OrExpr, ll.PtrToIntExpr, ll.SDivExpr, ll.SExtExpr, ll.SIToFPExpr, ll.SRemExpr, ll.SelectExpr, ll.ShlExpr, ll.ShuffleVectorExpr, ll.StructConst, ll.SubExpr, ll.TruncExpr, ll.TypeValue, ll.UDivExpr, ll.UIToFPExpr, ll.URemExpr, ll.UndefConst, ll.VectorConst, ll.XorExpr, ll.ZExtExpr, ll.ZeroInitializerConst))).(LlvmNode)
}

type ArgField struct {
	Node
}

func (n ArgField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type Args struct {
	Node
}

func (n Args) Args() []Arg {
	nodes := n.Children(selector.Arg)
	var result []Arg = make([]Arg, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, Arg{node})
	}
	return result
}

type ArrayConst struct {
	Node
}

func (n ArrayConst) Elems() []TypeConst {
	nodes := n.Children(selector.TypeConst)
	var result []TypeConst = make([]TypeConst, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, TypeConst{node})
	}
	return result
}

type ArrayType struct {
	Node
}

func (n ArrayType) Len() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

func (n ArrayType) Elem() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type Atomic struct {
	Node
}

type AtomicOp struct {
	Node
}

type AtomicOrdering struct {
	Node
}

type AtomicRMWInst struct {
	Node
}

func (n AtomicRMWInst) Volatile() *Volatile {
	if child := n.Child(selector.Volatile); child != nil {
		return &Volatile{child}
	}
	return nil
}

func (n AtomicRMWInst) Op() AtomicOp {
	return AtomicOp{n.Child(selector.AtomicOp)}
}

func (n AtomicRMWInst) Dst() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n AtomicRMWInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n AtomicRMWInst) SyncScope() *SyncScope {
	if child := n.Child(selector.SyncScope); child != nil {
		return &SyncScope{child}
	}
	return nil
}

func (n AtomicRMWInst) AtomicOrdering() AtomicOrdering {
	return AtomicOrdering{n.Child(selector.AtomicOrdering)}
}

func (n AtomicRMWInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type AttrGroupDef struct {
	Node
}

func (n AttrGroupDef) Name() AttrGroupID {
	return AttrGroupID{n.Child(selector.AttrGroupID)}
}

func (n AttrGroupDef) Attrs() []FuncAttr {
	nodes := n.Child(selector.AttrGroupID).NextAll(selector.FuncAttr)
	var result []FuncAttr = make([]FuncAttr, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(FuncAttr))
	}
	return result
}

type AttrGroupID struct {
	Node
}

type AttrPair struct {
	Node
}

func (n AttrPair) Key() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

func (n AttrPair) Val() StringLit {
	return StringLit{n.Child(selector.StringLit).Next(selector.StringLit)}
}

type AttrString struct {
	Node
}

func (n AttrString) Val() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type AttributesField struct {
	Node
}

func (n AttributesField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type BaseTypeField struct {
	Node
}

func (n BaseTypeField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type BasicBlock struct {
	Node
}

func (n BasicBlock) Name() *LabelIdent {
	if child := n.Child(selector.LabelIdent); child != nil {
		return &LabelIdent{child}
	}
	return nil
}

func (n BasicBlock) Insts() []Instruction {
	nodes := n.Children(selector.Instruction)
	var result []Instruction = make([]Instruction, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(Instruction))
	}
	return result
}

func (n BasicBlock) Term() Terminator {
	return ToLlvmNode(n.Child(selector.Terminator)).(Terminator)
}

type BitCastExpr struct {
	Node
}

func (n BitCastExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n BitCastExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type BitCastInst struct {
	Node
}

func (n BitCastInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n BitCastInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n BitCastInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type BlockAddressConst struct {
	Node
}

func (n BlockAddressConst) Func() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n BlockAddressConst) Block() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

type BoolConst struct {
	Node
}

func (n BoolConst) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type BoolLit struct {
	Node
}

type BrTerm struct {
	Node
}

func (n BrTerm) Target() Label {
	return Label{n.Child(selector.Label)}
}

func (n BrTerm) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type CCField struct {
	Node
}

func (n CCField) DwarfCC() DwarfCC {
	return DwarfCC{n.Child(selector.DwarfCC)}
}

type CallInst struct {
	Node
}

func (n CallInst) Tail() *Tail {
	if child := n.Child(selector.Tail); child != nil {
		return &Tail{child}
	}
	return nil
}

func (n CallInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var result []FastMathFlag = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, FastMathFlag{node})
	}
	return result
}

func (n CallInst) CallingConv() *CallingConv {
	if child := n.Child(selector.CallingConv); child != nil {
		return &CallingConv{child}
	}
	return nil
}

func (n CallInst) ReturnAttrs() []ReturnAttr {
	nodes := n.Children(selector.ReturnAttr)
	var result []ReturnAttr = make([]ReturnAttr, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(ReturnAttr))
	}
	return result
}

func (n CallInst) AddrSpace() *AddrSpace {
	if child := n.Child(selector.AddrSpace); child != nil {
		return &AddrSpace{child}
	}
	return nil
}

func (n CallInst) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n CallInst) Callee() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n CallInst) Args() Args {
	return Args{n.Child(selector.Args)}
}

func (n CallInst) FuncAttrs() []FuncAttr {
	nodes := n.Children(selector.FuncAttr)
	var result []FuncAttr = make([]FuncAttr, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(FuncAttr))
	}
	return result
}

func (n CallInst) OperandBundles() OperandBundles {
	return OperandBundles{n.Child(selector.OperandBundles)}
}

func (n CallInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type CallingConv struct {
	Node
}

func (n CallingConv) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type Case struct {
	Node
}

func (n Case) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n Case) Target() Label {
	return Label{n.Child(selector.Label)}
}

type CatchClause struct {
	Node
}

func (n CatchClause) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

type CatchPadInst struct {
	Node
}

func (n CatchPadInst) Scope() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n CatchPadInst) Args() []ExceptionArg {
	nodes := n.Children(selector.ExceptionArg)
	var result []ExceptionArg = make([]ExceptionArg, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ExceptionArg{node})
	}
	return result
}

func (n CatchPadInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type CatchRetTerm struct {
	Node
}

func (n CatchRetTerm) From() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n CatchRetTerm) To() Label {
	return Label{n.Child(selector.Label)}
}

func (n CatchRetTerm) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type CatchSwitchTerm struct {
	Node
}

func (n CatchSwitchTerm) Scope() ExceptionScope {
	return ExceptionScope{n.Child(selector.ExceptionScope)}
}

func (n CatchSwitchTerm) Handlers() []Label {
	nodes := n.Children(selector.Label)
	var result []Label = make([]Label, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, Label{node})
	}
	return result
}

func (n CatchSwitchTerm) UnwindTarget() UnwindTarget {
	return UnwindTarget{n.Child(selector.UnwindTarget)}
}

func (n CatchSwitchTerm) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type CharArrayConst struct {
	Node
}

func (n CharArrayConst) Val() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type ChecksumField struct {
	Node
}

func (n ChecksumField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type ChecksumKind struct {
	Node
}

type ChecksumkindField struct {
	Node
}

func (n ChecksumkindField) ChecksumKind() ChecksumKind {
	return ChecksumKind{n.Child(selector.ChecksumKind)}
}

type Cleanup struct {
	Node
}

type CleanupPadInst struct {
	Node
}

func (n CleanupPadInst) Scope() ExceptionScope {
	return ExceptionScope{n.Child(selector.ExceptionScope)}
}

func (n CleanupPadInst) Args() []ExceptionArg {
	nodes := n.Children(selector.ExceptionArg)
	var result []ExceptionArg = make([]ExceptionArg, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ExceptionArg{node})
	}
	return result
}

func (n CleanupPadInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type CleanupRetTerm struct {
	Node
}

func (n CleanupRetTerm) From() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n CleanupRetTerm) UnwindTarget() UnwindTarget {
	return UnwindTarget{n.Child(selector.UnwindTarget)}
}

func (n CleanupRetTerm) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type CmpXchgInst struct {
	Node
}

func (n CmpXchgInst) Weak() *Weak {
	if child := n.Child(selector.Weak); child != nil {
		return &Weak{child}
	}
	return nil
}

func (n CmpXchgInst) Volatile() *Volatile {
	if child := n.Child(selector.Volatile); child != nil {
		return &Volatile{child}
	}
	return nil
}

func (n CmpXchgInst) Ptr() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n CmpXchgInst) Cmp() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n CmpXchgInst) New() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue).Next(selector.TypeValue)}
}

func (n CmpXchgInst) SyncScope() *SyncScope {
	if child := n.Child(selector.SyncScope); child != nil {
		return &SyncScope{child}
	}
	return nil
}

func (n CmpXchgInst) Success() AtomicOrdering {
	return AtomicOrdering{n.Child(selector.AtomicOrdering)}
}

func (n CmpXchgInst) Failure() AtomicOrdering {
	return AtomicOrdering{n.Child(selector.AtomicOrdering).Next(selector.AtomicOrdering)}
}

func (n CmpXchgInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type ColumnField struct {
	Node
}

func (n ColumnField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type Comdat struct {
	Node
}

func (n Comdat) Name() *ComdatName {
	if child := n.Child(selector.ComdatName); child != nil {
		return &ComdatName{child}
	}
	return nil
}

type ComdatDef struct {
	Node
}

func (n ComdatDef) Name() ComdatName {
	return ComdatName{n.Child(selector.ComdatName)}
}

func (n ComdatDef) Kind() SelectionKind {
	return SelectionKind{n.Child(selector.SelectionKind)}
}

type ComdatName struct {
	Node
}

type CondBrTerm struct {
	Node
}

func (n CondBrTerm) CondTyp() IntType {
	return IntType{n.Child(selector.IntType)}
}

func (n CondBrTerm) Cond() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n CondBrTerm) TargetTrue() Label {
	return Label{n.Child(selector.Label)}
}

func (n CondBrTerm) TargetFalse() Label {
	return Label{n.Child(selector.Label).Next(selector.Label)}
}

func (n CondBrTerm) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type ConfigMacrosField struct {
	Node
}

func (n ConfigMacrosField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type ContainingTypeField struct {
	Node
}

func (n ContainingTypeField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type CountField struct {
	Node
}

func (n CountField) MDFieldOrInt() MDFieldOrInt {
	return ToLlvmNode(n.Child(selector.MDFieldOrInt)).(MDFieldOrInt)
}

type DIBasicType struct {
	Node
}

func (n DIBasicType) Fields() []DIBasicTypeField {
	nodes := n.Children(selector.DIBasicTypeField)
	var result []DIBasicTypeField = make([]DIBasicTypeField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DIBasicTypeField))
	}
	return result
}

type DICompileUnit struct {
	Node
}

func (n DICompileUnit) Fields() []DICompileUnitField {
	nodes := n.Children(selector.DICompileUnitField)
	var result []DICompileUnitField = make([]DICompileUnitField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DICompileUnitField))
	}
	return result
}

type DICompositeType struct {
	Node
}

func (n DICompositeType) Fields() []DICompositeTypeField {
	nodes := n.Children(selector.DICompositeTypeField)
	var result []DICompositeTypeField = make([]DICompositeTypeField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DICompositeTypeField))
	}
	return result
}

type DIDerivedType struct {
	Node
}

func (n DIDerivedType) Fields() []DIDerivedTypeField {
	nodes := n.Children(selector.DIDerivedTypeField)
	var result []DIDerivedTypeField = make([]DIDerivedTypeField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DIDerivedTypeField))
	}
	return result
}

type DIEnumerator struct {
	Node
}

func (n DIEnumerator) Fields() []DIEnumeratorField {
	nodes := n.Children(selector.DIEnumeratorField)
	var result []DIEnumeratorField = make([]DIEnumeratorField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DIEnumeratorField))
	}
	return result
}

type DIExpression struct {
	Node
}

func (n DIExpression) Fields() []DIExpressionField {
	nodes := n.Children(selector.DIExpressionField)
	var result []DIExpressionField = make([]DIExpressionField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DIExpressionField))
	}
	return result
}

type DIFile struct {
	Node
}

func (n DIFile) Fields() []DIFileField {
	nodes := n.Children(selector.DIFileField)
	var result []DIFileField = make([]DIFileField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DIFileField))
	}
	return result
}

type DIFlag struct {
	Node
}

func (n DIFlag) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type DIFlags struct {
	Node
}

func (n DIFlags) Flags() []DIFlag {
	nodes := n.Children(selector.DIFlag)
	var result []DIFlag = make([]DIFlag, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, DIFlag{node})
	}
	return result
}

type DIGlobalVariable struct {
	Node
}

func (n DIGlobalVariable) Fields() []DIGlobalVariableField {
	nodes := n.Children(selector.DIGlobalVariableField)
	var result []DIGlobalVariableField = make([]DIGlobalVariableField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DIGlobalVariableField))
	}
	return result
}

type DIGlobalVariableExpression struct {
	Node
}

func (n DIGlobalVariableExpression) Fields() []DIGlobalVariableExpressionField {
	nodes := n.Children(selector.DIGlobalVariableExpressionField)
	var result []DIGlobalVariableExpressionField = make([]DIGlobalVariableExpressionField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DIGlobalVariableExpressionField))
	}
	return result
}

type DIImportedEntity struct {
	Node
}

func (n DIImportedEntity) Fields() []DIImportedEntityField {
	nodes := n.Children(selector.DIImportedEntityField)
	var result []DIImportedEntityField = make([]DIImportedEntityField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DIImportedEntityField))
	}
	return result
}

type DILabel struct {
	Node
}

func (n DILabel) Fields() []DILabelField {
	nodes := n.Children(selector.DILabelField)
	var result []DILabelField = make([]DILabelField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DILabelField))
	}
	return result
}

type DILexicalBlock struct {
	Node
}

func (n DILexicalBlock) Fields() []DILexicalBlockField {
	nodes := n.Children(selector.DILexicalBlockField)
	var result []DILexicalBlockField = make([]DILexicalBlockField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DILexicalBlockField))
	}
	return result
}

type DILexicalBlockFile struct {
	Node
}

func (n DILexicalBlockFile) Fields() []DILexicalBlockFileField {
	nodes := n.Children(selector.DILexicalBlockFileField)
	var result []DILexicalBlockFileField = make([]DILexicalBlockFileField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DILexicalBlockFileField))
	}
	return result
}

type DILocalVariable struct {
	Node
}

func (n DILocalVariable) Fields() []DILocalVariableField {
	nodes := n.Children(selector.DILocalVariableField)
	var result []DILocalVariableField = make([]DILocalVariableField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DILocalVariableField))
	}
	return result
}

type DILocation struct {
	Node
}

func (n DILocation) Fields() []DILocationField {
	nodes := n.Children(selector.DILocationField)
	var result []DILocationField = make([]DILocationField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DILocationField))
	}
	return result
}

type DIMacro struct {
	Node
}

func (n DIMacro) Fields() []DIMacroField {
	nodes := n.Children(selector.DIMacroField)
	var result []DIMacroField = make([]DIMacroField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DIMacroField))
	}
	return result
}

type DIMacroFile struct {
	Node
}

func (n DIMacroFile) Fields() []DIMacroFileField {
	nodes := n.Children(selector.DIMacroFileField)
	var result []DIMacroFileField = make([]DIMacroFileField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DIMacroFileField))
	}
	return result
}

type DIModule struct {
	Node
}

func (n DIModule) Fields() []DIModuleField {
	nodes := n.Children(selector.DIModuleField)
	var result []DIModuleField = make([]DIModuleField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DIModuleField))
	}
	return result
}

type DINamespace struct {
	Node
}

func (n DINamespace) Fields() []DINamespaceField {
	nodes := n.Children(selector.DINamespaceField)
	var result []DINamespaceField = make([]DINamespaceField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DINamespaceField))
	}
	return result
}

type DIObjCProperty struct {
	Node
}

func (n DIObjCProperty) Fields() []DIObjCPropertyField {
	nodes := n.Children(selector.DIObjCPropertyField)
	var result []DIObjCPropertyField = make([]DIObjCPropertyField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DIObjCPropertyField))
	}
	return result
}

type DISubprogram struct {
	Node
}

func (n DISubprogram) Fields() []DISubprogramField {
	nodes := n.Children(selector.DISubprogramField)
	var result []DISubprogramField = make([]DISubprogramField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DISubprogramField))
	}
	return result
}

type DISubrange struct {
	Node
}

func (n DISubrange) Fields() []DISubrangeField {
	nodes := n.Children(selector.DISubrangeField)
	var result []DISubrangeField = make([]DISubrangeField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DISubrangeField))
	}
	return result
}

type DISubroutineType struct {
	Node
}

func (n DISubroutineType) Fields() []DISubroutineTypeField {
	nodes := n.Children(selector.DISubroutineTypeField)
	var result []DISubroutineTypeField = make([]DISubroutineTypeField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DISubroutineTypeField))
	}
	return result
}

type DITemplateTypeParameter struct {
	Node
}

func (n DITemplateTypeParameter) Fields() []DITemplateTypeParameterField {
	nodes := n.Children(selector.DITemplateTypeParameterField)
	var result []DITemplateTypeParameterField = make([]DITemplateTypeParameterField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DITemplateTypeParameterField))
	}
	return result
}

type DITemplateValueParameter struct {
	Node
}

func (n DITemplateValueParameter) Fields() []DITemplateValueParameterField {
	nodes := n.Children(selector.DITemplateValueParameterField)
	var result []DITemplateValueParameterField = make([]DITemplateValueParameterField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(DITemplateValueParameterField))
	}
	return result
}

type DLLStorageClass struct {
	Node
}

type DebugInfoForProfilingField struct {
	Node
}

func (n DebugInfoForProfilingField) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type DeclarationField struct {
	Node
}

func (n DeclarationField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type Dereferenceable struct {
	Node
}

func (n Dereferenceable) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type DirectoryField struct {
	Node
}

func (n DirectoryField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type DiscriminatorField struct {
	Node
}

func (n DiscriminatorField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type DiscriminatorIntField struct {
	Node
}

func (n DiscriminatorIntField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type Distinct struct {
	Node
}

type DwarfAddressSpaceField struct {
	Node
}

func (n DwarfAddressSpaceField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type DwarfAttEncoding struct {
	Node
}

func (n DwarfAttEncoding) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type DwarfCC struct {
	Node
}

func (n DwarfCC) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type DwarfLang struct {
	Node
}

func (n DwarfLang) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type DwarfMacinfo struct {
	Node
}

func (n DwarfMacinfo) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type DwarfOp struct {
	Node
}

type DwarfTag struct {
	Node
}

func (n DwarfTag) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type DwarfVirtuality struct {
	Node
}

func (n DwarfVirtuality) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type DwoIdField struct {
	Node
}

func (n DwoIdField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type ElementsField struct {
	Node
}

func (n ElementsField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type Ellipsis struct {
	Node
}

type EmissionKind struct {
	Node
}

func (n EmissionKind) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type EmissionKindField struct {
	Node
}

func (n EmissionKindField) EmissionKind() EmissionKind {
	return EmissionKind{n.Child(selector.EmissionKind)}
}

type EncodingField struct {
	Node
}

func (n EncodingField) DwarfAttEncoding() DwarfAttEncoding {
	return DwarfAttEncoding{n.Child(selector.DwarfAttEncoding)}
}

type EntityField struct {
	Node
}

func (n EntityField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type EnumsField struct {
	Node
}

func (n EnumsField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type Exact struct {
	Node
}

type ExceptionArg struct {
	Node
}

func (n ExceptionArg) Typ() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.ArrayType, ll.FloatType, ll.IntType, ll.LabelType, ll.MMXType, ll.MetadataType, ll.NamedType, ll.PackedStructType, ll.PointerType, ll.StructType, ll.TokenType, ll.VectorType))).(LlvmNode)
}

func (n ExceptionArg) Val() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.AShrExpr, ll.AddExpr, ll.AddrSpaceCastExpr, ll.AndExpr, ll.ArrayConst, ll.BitCastExpr, ll.BlockAddressConst, ll.BoolConst, ll.CharArrayConst, ll.DIBasicType, ll.DICompileUnit, ll.DICompositeType, ll.DIDerivedType, ll.DIEnumerator, ll.DIExpression, ll.DIFile, ll.DIGlobalVariable, ll.DIGlobalVariableExpression, ll.DIImportedEntity, ll.DILabel, ll.DILexicalBlock, ll.DILexicalBlockFile, ll.DILocalVariable, ll.DILocation, ll.DIMacro, ll.DIMacroFile, ll.DIModule, ll.DINamespace, ll.DIObjCProperty, ll.DISubprogram, ll.DISubrange, ll.DISubroutineType, ll.DITemplateTypeParameter, ll.DITemplateValueParameter, ll.ExtractElementExpr, ll.ExtractValueExpr, ll.FAddExpr, ll.FCmpExpr, ll.FDivExpr, ll.FMulExpr, ll.FPExtExpr, ll.FPToSIExpr, ll.FPToUIExpr, ll.FPTruncExpr, ll.FRemExpr, ll.FSubExpr, ll.FloatConst, ll.GenericDINode, ll.GetElementPtrExpr, ll.GlobalIdent, ll.ICmpExpr, ll.InlineAsm, ll.InsertElementExpr, ll.InsertValueExpr, ll.IntConst, ll.IntToPtrExpr, ll.LShrExpr, ll.LocalIdent, ll.MDString, ll.MDTuple, ll.MetadataID, ll.MulExpr, ll.NoneConst, ll.NullConst, ll.OrExpr, ll.PtrToIntExpr, ll.SDivExpr, ll.SExtExpr, ll.SIToFPExpr, ll.SRemExpr, ll.SelectExpr, ll.ShlExpr, ll.ShuffleVectorExpr, ll.StructConst, ll.SubExpr, ll.TruncExpr, ll.TypeValue, ll.UDivExpr, ll.UIToFPExpr, ll.URemExpr, ll.UndefConst, ll.VectorConst, ll.XorExpr, ll.ZExtExpr, ll.ZeroInitializerConst))).(LlvmNode)
}

type ExceptionScope struct {
	Node
}

func (n ExceptionScope) LocalIdent() *LocalIdent {
	if child := n.Child(selector.LocalIdent); child != nil {
		return &LocalIdent{child}
	}
	return nil
}

func (n ExceptionScope) NoneConst() *NoneConst {
	if child := n.Child(selector.NoneConst); child != nil {
		return &NoneConst{child}
	}
	return nil
}

type ExportSymbolsField struct {
	Node
}

func (n ExportSymbolsField) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type ExprField struct {
	Node
}

func (n ExprField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ExternLinkage struct {
	Node
}

type ExternallyInitialized struct {
	Node
}

type ExtraDataField struct {
	Node
}

func (n ExtraDataField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ExtractElementExpr struct {
	Node
}

func (n ExtractElementExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ExtractElementExpr) Index() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type ExtractElementInst struct {
	Node
}

func (n ExtractElementInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ExtractElementInst) Index() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n ExtractElementInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type ExtractValueExpr struct {
	Node
}

func (n ExtractValueExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ExtractValueExpr) Indices() []UintLit {
	nodes := n.Children(selector.UintLit)
	var result []UintLit = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, UintLit{node})
	}
	return result
}

type ExtractValueInst struct {
	Node
}

func (n ExtractValueInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ExtractValueInst) Indices() []UintLit {
	nodes := n.Children(selector.UintLit)
	var result []UintLit = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, UintLit{node})
	}
	return result
}

func (n ExtractValueInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type FAddExpr struct {
	Node
}

func (n FAddExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FAddExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FAddInst struct {
	Node
}

func (n FAddInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var result []FastMathFlag = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, FastMathFlag{node})
	}
	return result
}

func (n FAddInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FAddInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FAddInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type FCmpExpr struct {
	Node
}

func (n FCmpExpr) Pred() FPred {
	return FPred{n.Child(selector.FPred)}
}

func (n FCmpExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FCmpExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FCmpInst struct {
	Node
}

func (n FCmpInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var result []FastMathFlag = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, FastMathFlag{node})
	}
	return result
}

func (n FCmpInst) Pred() FPred {
	return FPred{n.Child(selector.FPred)}
}

func (n FCmpInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FCmpInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FCmpInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type FDivExpr struct {
	Node
}

func (n FDivExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FDivExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FDivInst struct {
	Node
}

func (n FDivInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var result []FastMathFlag = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, FastMathFlag{node})
	}
	return result
}

func (n FDivInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FDivInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FDivInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type FMulExpr struct {
	Node
}

func (n FMulExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FMulExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FMulInst struct {
	Node
}

func (n FMulInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var result []FastMathFlag = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, FastMathFlag{node})
	}
	return result
}

func (n FMulInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FMulInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FMulInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type FPExtExpr struct {
	Node
}

func (n FPExtExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FPExtExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type FPExtInst struct {
	Node
}

func (n FPExtInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FPExtInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FPExtInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type FPToSIExpr struct {
	Node
}

func (n FPToSIExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FPToSIExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type FPToSIInst struct {
	Node
}

func (n FPToSIInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FPToSIInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FPToSIInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type FPToUIExpr struct {
	Node
}

func (n FPToUIExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FPToUIExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type FPToUIInst struct {
	Node
}

func (n FPToUIInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FPToUIInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FPToUIInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type FPTruncExpr struct {
	Node
}

func (n FPTruncExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FPTruncExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type FPTruncInst struct {
	Node
}

func (n FPTruncInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FPTruncInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FPTruncInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type FPred struct {
	Node
}

type FRemExpr struct {
	Node
}

func (n FRemExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FRemExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FRemInst struct {
	Node
}

func (n FRemInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var result []FastMathFlag = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, FastMathFlag{node})
	}
	return result
}

func (n FRemInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FRemInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FRemInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type FSubExpr struct {
	Node
}

func (n FSubExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FSubExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FSubInst struct {
	Node
}

func (n FSubInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var result []FastMathFlag = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, FastMathFlag{node})
	}
	return result
}

func (n FSubInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FSubInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FSubInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type FastMathFlag struct {
	Node
}

type FenceInst struct {
	Node
}

func (n FenceInst) SyncScope() *SyncScope {
	if child := n.Child(selector.SyncScope); child != nil {
		return &SyncScope{child}
	}
	return nil
}

func (n FenceInst) AtomicOrdering() AtomicOrdering {
	return AtomicOrdering{n.Child(selector.AtomicOrdering)}
}

func (n FenceInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type FileField struct {
	Node
}

func (n FileField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type FilenameField struct {
	Node
}

func (n FilenameField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type FilterClause struct {
	Node
}

func (n FilterClause) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FilterClause) Val() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.ArrayConst, ll.CharArrayConst))).(LlvmNode)
}

type FlagsField struct {
	Node
}

func (n FlagsField) DIFlags() DIFlags {
	return DIFlags{n.Child(selector.DIFlags)}
}

type FlagsStringField struct {
	Node
}

func (n FlagsStringField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type FloatConst struct {
	Node
}

func (n FloatConst) FloatLit() FloatLit {
	return FloatLit{n.Child(selector.FloatLit)}
}

type FloatKind struct {
	Node
}

type FloatLit struct {
	Node
}

type FloatType struct {
	Node
}

func (n FloatType) FloatKind() FloatKind {
	return FloatKind{n.Child(selector.FloatKind)}
}

type FuncAttribute struct {
	Node
}

type FuncBody struct {
	Node
}

func (n FuncBody) Blocks() []BasicBlock {
	nodes := n.Children(selector.BasicBlock)
	var result []BasicBlock = make([]BasicBlock, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, BasicBlock{node})
	}
	return result
}

func (n FuncBody) UseListOrders() []UseListOrder {
	nodes := n.Children(selector.UseListOrder)
	var result []UseListOrder = make([]UseListOrder, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, UseListOrder{node})
	}
	return result
}

type FuncDecl struct {
	Node
}

func (n FuncDecl) Metadata() FuncMetadata {
	return FuncMetadata{n.Child(selector.FuncMetadata)}
}

func (n FuncDecl) Header() FuncHeader {
	return FuncHeader{n.Child(selector.FuncHeader)}
}

type FuncDef struct {
	Node
}

func (n FuncDef) Header() FuncHeader {
	return FuncHeader{n.Child(selector.FuncHeader)}
}

func (n FuncDef) Metadata() FuncMetadata {
	return FuncMetadata{n.Child(selector.FuncMetadata)}
}

func (n FuncDef) Body() FuncBody {
	return FuncBody{n.Child(selector.FuncBody)}
}

type FuncHeader struct {
	Node
}

func (n FuncHeader) ExternLinkage() *ExternLinkage {
	if child := n.Child(selector.ExternLinkage); child != nil {
		return &ExternLinkage{child}
	}
	return nil
}

func (n FuncHeader) Linkage() *Linkage {
	if child := n.Child(selector.Linkage); child != nil {
		return &Linkage{child}
	}
	return nil
}

func (n FuncHeader) Preemption() *Preemption {
	if child := n.Child(selector.Preemption); child != nil {
		return &Preemption{child}
	}
	return nil
}

func (n FuncHeader) Visibility() *Visibility {
	if child := n.Child(selector.Visibility); child != nil {
		return &Visibility{child}
	}
	return nil
}

func (n FuncHeader) DLLStorageClass() *DLLStorageClass {
	if child := n.Child(selector.DLLStorageClass); child != nil {
		return &DLLStorageClass{child}
	}
	return nil
}

func (n FuncHeader) CallingConv() *CallingConv {
	if child := n.Child(selector.CallingConv); child != nil {
		return &CallingConv{child}
	}
	return nil
}

func (n FuncHeader) ReturnAttrs() []ReturnAttr {
	nodes := n.Children(selector.ReturnAttr)
	var result []ReturnAttr = make([]ReturnAttr, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(ReturnAttr))
	}
	return result
}

func (n FuncHeader) RetType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FuncHeader) Name() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n FuncHeader) Params() Params {
	return Params{n.Child(selector.Params)}
}

func (n FuncHeader) UnnamedAddr() *UnnamedAddr {
	if child := n.Child(selector.UnnamedAddr); child != nil {
		return &UnnamedAddr{child}
	}
	return nil
}

func (n FuncHeader) AddrSpace() *AddrSpace {
	if child := n.Child(selector.AddrSpace); child != nil {
		return &AddrSpace{child}
	}
	return nil
}

func (n FuncHeader) FuncAttrs() []FuncAttr {
	nodes := n.Children(selector.FuncAttr)
	var result []FuncAttr = make([]FuncAttr, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(FuncAttr))
	}
	return result
}

func (n FuncHeader) Section() *Section {
	if child := n.Child(selector.Section); child != nil {
		return &Section{child}
	}
	return nil
}

func (n FuncHeader) Comdat() *Comdat {
	if child := n.Child(selector.Comdat); child != nil {
		return &Comdat{child}
	}
	return nil
}

func (n FuncHeader) GCNode() *GCNode {
	if child := n.Child(selector.GCNode); child != nil {
		return &GCNode{child}
	}
	return nil
}

func (n FuncHeader) Prefix() *Prefix {
	if child := n.Child(selector.Prefix); child != nil {
		return &Prefix{child}
	}
	return nil
}

func (n FuncHeader) Prologue() *Prologue {
	if child := n.Child(selector.Prologue); child != nil {
		return &Prologue{child}
	}
	return nil
}

func (n FuncHeader) Personality() *Personality {
	if child := n.Child(selector.Personality); child != nil {
		return &Personality{child}
	}
	return nil
}

type FuncMetadata struct {
	Node
}

func (n FuncMetadata) MetadataAttachments() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var result []MetadataAttachment = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, MetadataAttachment{node})
	}
	return result
}

type FuncType struct {
	Node
}

func (n FuncType) RetType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FuncType) Params() Params {
	return Params{n.Child(selector.Params)}
}

type GCNode struct {
	Node
}

func (n GCNode) Name() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type GEPIndex struct {
	Node
}

func (n GEPIndex) InRange() *InRange {
	if child := n.Child(selector.InRange); child != nil {
		return &InRange{child}
	}
	return nil
}

func (n GEPIndex) Index() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

type GenericDINode struct {
	Node
}

func (n GenericDINode) Fields() []GenericDINodeField {
	nodes := n.Children(selector.GenericDINodeField)
	var result []GenericDINodeField = make([]GenericDINodeField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(GenericDINodeField))
	}
	return result
}

type GetElementPtrExpr struct {
	Node
}

func (n GetElementPtrExpr) InBounds() *InBounds {
	if child := n.Child(selector.InBounds); child != nil {
		return &InBounds{child}
	}
	return nil
}

func (n GetElementPtrExpr) ElemType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n GetElementPtrExpr) Src() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n GetElementPtrExpr) Indices() []GEPIndex {
	nodes := n.Children(selector.GEPIndex)
	var result []GEPIndex = make([]GEPIndex, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, GEPIndex{node})
	}
	return result
}

type GetElementPtrInst struct {
	Node
}

func (n GetElementPtrInst) InBounds() *InBounds {
	if child := n.Child(selector.InBounds); child != nil {
		return &InBounds{child}
	}
	return nil
}

func (n GetElementPtrInst) ElemType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n GetElementPtrInst) Src() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n GetElementPtrInst) Indices() []TypeValue {
	nodes := n.Child(selector.TypeValue).NextAll(selector.TypeValue)
	var result []TypeValue = make([]TypeValue, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, TypeValue{node})
	}
	return result
}

func (n GetElementPtrInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type GetterField struct {
	Node
}

func (n GetterField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type GlobalDecl struct {
	Node
}

func (n GlobalDecl) Name() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n GlobalDecl) ExternLinkage() ExternLinkage {
	return ExternLinkage{n.Child(selector.ExternLinkage)}
}

func (n GlobalDecl) Preemption() *Preemption {
	if child := n.Child(selector.Preemption); child != nil {
		return &Preemption{child}
	}
	return nil
}

func (n GlobalDecl) Visibility() *Visibility {
	if child := n.Child(selector.Visibility); child != nil {
		return &Visibility{child}
	}
	return nil
}

func (n GlobalDecl) DLLStorageClass() *DLLStorageClass {
	if child := n.Child(selector.DLLStorageClass); child != nil {
		return &DLLStorageClass{child}
	}
	return nil
}

func (n GlobalDecl) ThreadLocal() *ThreadLocal {
	if child := n.Child(selector.ThreadLocal); child != nil {
		return &ThreadLocal{child}
	}
	return nil
}

func (n GlobalDecl) UnnamedAddr() *UnnamedAddr {
	if child := n.Child(selector.UnnamedAddr); child != nil {
		return &UnnamedAddr{child}
	}
	return nil
}

func (n GlobalDecl) AddrSpace() *AddrSpace {
	if child := n.Child(selector.AddrSpace); child != nil {
		return &AddrSpace{child}
	}
	return nil
}

func (n GlobalDecl) ExternallyInitialized() *ExternallyInitialized {
	if child := n.Child(selector.ExternallyInitialized); child != nil {
		return &ExternallyInitialized{child}
	}
	return nil
}

func (n GlobalDecl) Immutable() Immutable {
	return Immutable{n.Child(selector.Immutable)}
}

func (n GlobalDecl) ContentType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n GlobalDecl) GlobalAttrs() []GlobalAttr {
	nodes := n.Children(selector.GlobalAttr)
	var result []GlobalAttr = make([]GlobalAttr, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(GlobalAttr))
	}
	return result
}

func (n GlobalDecl) FuncAttrs() []FuncAttr {
	nodes := n.Children(selector.FuncAttr)
	var result []FuncAttr = make([]FuncAttr, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(FuncAttr))
	}
	return result
}

type GlobalDef struct {
	Node
}

func (n GlobalDef) Name() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n GlobalDef) Linkage() *Linkage {
	if child := n.Child(selector.Linkage); child != nil {
		return &Linkage{child}
	}
	return nil
}

func (n GlobalDef) Preemption() *Preemption {
	if child := n.Child(selector.Preemption); child != nil {
		return &Preemption{child}
	}
	return nil
}

func (n GlobalDef) Visibility() *Visibility {
	if child := n.Child(selector.Visibility); child != nil {
		return &Visibility{child}
	}
	return nil
}

func (n GlobalDef) DLLStorageClass() *DLLStorageClass {
	if child := n.Child(selector.DLLStorageClass); child != nil {
		return &DLLStorageClass{child}
	}
	return nil
}

func (n GlobalDef) ThreadLocal() *ThreadLocal {
	if child := n.Child(selector.ThreadLocal); child != nil {
		return &ThreadLocal{child}
	}
	return nil
}

func (n GlobalDef) UnnamedAddr() *UnnamedAddr {
	if child := n.Child(selector.UnnamedAddr); child != nil {
		return &UnnamedAddr{child}
	}
	return nil
}

func (n GlobalDef) AddrSpace() *AddrSpace {
	if child := n.Child(selector.AddrSpace); child != nil {
		return &AddrSpace{child}
	}
	return nil
}

func (n GlobalDef) ExternallyInitialized() *ExternallyInitialized {
	if child := n.Child(selector.ExternallyInitialized); child != nil {
		return &ExternallyInitialized{child}
	}
	return nil
}

func (n GlobalDef) Immutable() Immutable {
	return Immutable{n.Child(selector.Immutable)}
}

func (n GlobalDef) ContentType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n GlobalDef) Init() Constant {
	return ToLlvmNode(n.Child(selector.GlobalIdent).Next(selector.Constant)).(Constant)
}

func (n GlobalDef) GlobalAttrs() []GlobalAttr {
	nodes := n.Children(selector.GlobalAttr)
	var result []GlobalAttr = make([]GlobalAttr, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(GlobalAttr))
	}
	return result
}

func (n GlobalDef) FuncAttrs() []FuncAttr {
	nodes := n.Children(selector.FuncAttr)
	var result []FuncAttr = make([]FuncAttr, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(FuncAttr))
	}
	return result
}

type GlobalIdent struct {
	Node
}

type GlobalsField struct {
	Node
}

func (n GlobalsField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type HeaderField struct {
	Node
}

func (n HeaderField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type ICmpExpr struct {
	Node
}

func (n ICmpExpr) Pred() IPred {
	return IPred{n.Child(selector.IPred)}
}

func (n ICmpExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ICmpExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type ICmpInst struct {
	Node
}

func (n ICmpInst) Pred() IPred {
	return IPred{n.Child(selector.IPred)}
}

func (n ICmpInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ICmpInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n ICmpInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type IFuncDef struct {
	Node
}

func (n IFuncDef) Name() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n IFuncDef) ExternLinkage() *ExternLinkage {
	if child := n.Child(selector.ExternLinkage); child != nil {
		return &ExternLinkage{child}
	}
	return nil
}

func (n IFuncDef) Linkage() *Linkage {
	if child := n.Child(selector.Linkage); child != nil {
		return &Linkage{child}
	}
	return nil
}

func (n IFuncDef) Preemption() *Preemption {
	if child := n.Child(selector.Preemption); child != nil {
		return &Preemption{child}
	}
	return nil
}

func (n IFuncDef) Visibility() *Visibility {
	if child := n.Child(selector.Visibility); child != nil {
		return &Visibility{child}
	}
	return nil
}

func (n IFuncDef) DLLStorageClass() *DLLStorageClass {
	if child := n.Child(selector.DLLStorageClass); child != nil {
		return &DLLStorageClass{child}
	}
	return nil
}

func (n IFuncDef) ThreadLocal() *ThreadLocal {
	if child := n.Child(selector.ThreadLocal); child != nil {
		return &ThreadLocal{child}
	}
	return nil
}

func (n IFuncDef) UnnamedAddr() *UnnamedAddr {
	if child := n.Child(selector.UnnamedAddr); child != nil {
		return &UnnamedAddr{child}
	}
	return nil
}

func (n IFuncDef) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n IFuncDef) ResolverType() Type {
	return ToLlvmNode(n.Child(selector.Type).Next(selector.Type)).(Type)
}

func (n IFuncDef) Resolver() Constant {
	return ToLlvmNode(n.Child(selector.GlobalIdent).Next(selector.Constant)).(Constant)
}

type IPred struct {
	Node
}

type IdentifierField struct {
	Node
}

func (n IdentifierField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type Immutable struct {
	Node
}

type ImportsField struct {
	Node
}

func (n ImportsField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type InAlloca struct {
	Node
}

type InBounds struct {
	Node
}

type InRange struct {
	Node
}

type Inc struct {
	Node
}

func (n Inc) X() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n Inc) Pred() LocalIdent {
	return LocalIdent{n.Child(selector.Value).Next(selector.LocalIdent)}
}

type IncludePathField struct {
	Node
}

func (n IncludePathField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type IndirectBrTerm struct {
	Node
}

func (n IndirectBrTerm) Addr() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n IndirectBrTerm) Targets() []Label {
	nodes := n.Children(selector.Label)
	var result []Label = make([]Label, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, Label{node})
	}
	return result
}

func (n IndirectBrTerm) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type InlineAsm struct {
	Node
}

func (n InlineAsm) SideEffect() *SideEffect {
	if child := n.Child(selector.SideEffect); child != nil {
		return &SideEffect{child}
	}
	return nil
}

func (n InlineAsm) AlignStack() *AlignStack {
	if child := n.Child(selector.AlignStack); child != nil {
		return &AlignStack{child}
	}
	return nil
}

func (n InlineAsm) IntelDialect() *IntelDialect {
	if child := n.Child(selector.IntelDialect); child != nil {
		return &IntelDialect{child}
	}
	return nil
}

func (n InlineAsm) Asm() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

func (n InlineAsm) Constraints() StringLit {
	return StringLit{n.Child(selector.StringLit).Next(selector.StringLit)}
}

type InlinedAtField struct {
	Node
}

func (n InlinedAtField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type InsertElementExpr struct {
	Node
}

func (n InsertElementExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n InsertElementExpr) Elem() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

func (n InsertElementExpr) Index() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst).Next(selector.TypeConst)}
}

type InsertElementInst struct {
	Node
}

func (n InsertElementInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n InsertElementInst) Elem() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n InsertElementInst) Index() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue).Next(selector.TypeValue)}
}

func (n InsertElementInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type InsertValueExpr struct {
	Node
}

func (n InsertValueExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n InsertValueExpr) Elem() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

func (n InsertValueExpr) Indices() []UintLit {
	nodes := n.Children(selector.UintLit)
	var result []UintLit = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, UintLit{node})
	}
	return result
}

type InsertValueInst struct {
	Node
}

func (n InsertValueInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n InsertValueInst) Elem() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n InsertValueInst) Indices() []UintLit {
	nodes := n.Children(selector.UintLit)
	var result []UintLit = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, UintLit{node})
	}
	return result
}

func (n InsertValueInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type InstMetadata struct {
	Node
}

func (n InstMetadata) MetadataAttachments() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var result []MetadataAttachment = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, MetadataAttachment{node})
	}
	return result
}

type IntConst struct {
	Node
}

func (n IntConst) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type IntLit struct {
	Node
}

type IntToPtrExpr struct {
	Node
}

func (n IntToPtrExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n IntToPtrExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type IntToPtrInst struct {
	Node
}

func (n IntToPtrInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n IntToPtrInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n IntToPtrInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type IntType struct {
	Node
}

type IntelDialect struct {
	Node
}

type InvokeTerm struct {
	Node
}

func (n InvokeTerm) CallingConv() *CallingConv {
	if child := n.Child(selector.CallingConv); child != nil {
		return &CallingConv{child}
	}
	return nil
}

func (n InvokeTerm) ReturnAttrs() []ReturnAttr {
	nodes := n.Children(selector.ReturnAttr)
	var result []ReturnAttr = make([]ReturnAttr, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(ReturnAttr))
	}
	return result
}

func (n InvokeTerm) AddrSpace() *AddrSpace {
	if child := n.Child(selector.AddrSpace); child != nil {
		return &AddrSpace{child}
	}
	return nil
}

func (n InvokeTerm) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n InvokeTerm) Invokee() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n InvokeTerm) Args() Args {
	return Args{n.Child(selector.Args)}
}

func (n InvokeTerm) FuncAttrs() []FuncAttr {
	nodes := n.Children(selector.FuncAttr)
	var result []FuncAttr = make([]FuncAttr, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(FuncAttr))
	}
	return result
}

func (n InvokeTerm) OperandBundles() OperandBundles {
	return OperandBundles{n.Child(selector.OperandBundles)}
}

func (n InvokeTerm) Normal() Label {
	return Label{n.Child(selector.Label)}
}

func (n InvokeTerm) Exception() Label {
	return Label{n.Child(selector.Label).Next(selector.Label)}
}

func (n InvokeTerm) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type IsDefinitionField struct {
	Node
}

func (n IsDefinitionField) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type IsImplicitCodeField struct {
	Node
}

func (n IsImplicitCodeField) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type IsLocalField struct {
	Node
}

func (n IsLocalField) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type IsOptimizedField struct {
	Node
}

func (n IsOptimizedField) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type IsUnsignedField struct {
	Node
}

func (n IsUnsignedField) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type IsysrootField struct {
	Node
}

func (n IsysrootField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type LShrExpr struct {
	Node
}

func (n LShrExpr) Exact() *Exact {
	if child := n.Child(selector.Exact); child != nil {
		return &Exact{child}
	}
	return nil
}

func (n LShrExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n LShrExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type LShrInst struct {
	Node
}

func (n LShrInst) Exact() *Exact {
	if child := n.Child(selector.Exact); child != nil {
		return &Exact{child}
	}
	return nil
}

func (n LShrInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n LShrInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n LShrInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type Label struct {
	Node
}

func (n Label) Typ() LabelType {
	return LabelType{n.Child(selector.LabelType)}
}

func (n Label) Name() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

type LabelIdent struct {
	Node
}

type LabelType struct {
	Node
}

type LandingPadInst struct {
	Node
}

func (n LandingPadInst) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n LandingPadInst) Cleanup() *Cleanup {
	if child := n.Child(selector.Cleanup); child != nil {
		return &Cleanup{child}
	}
	return nil
}

func (n LandingPadInst) Clauses() []Clause {
	nodes := n.Children(selector.Clause)
	var result []Clause = make([]Clause, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(Clause))
	}
	return result
}

func (n LandingPadInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type LanguageField struct {
	Node
}

func (n LanguageField) DwarfLang() DwarfLang {
	return DwarfLang{n.Child(selector.DwarfLang)}
}

type LineField struct {
	Node
}

func (n LineField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type Linkage struct {
	Node
}

type LinkageNameField struct {
	Node
}

func (n LinkageNameField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type LoadInst struct {
	Node
}

func (n LoadInst) Atomic() *Atomic {
	if child := n.Child(selector.Atomic); child != nil {
		return &Atomic{child}
	}
	return nil
}

func (n LoadInst) Volatile() *Volatile {
	if child := n.Child(selector.Volatile); child != nil {
		return &Volatile{child}
	}
	return nil
}

func (n LoadInst) ElemType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n LoadInst) Src() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n LoadInst) SyncScope() *SyncScope {
	if child := n.Child(selector.SyncScope); child != nil {
		return &SyncScope{child}
	}
	return nil
}

func (n LoadInst) AtomicOrdering() *AtomicOrdering {
	if child := n.Child(selector.AtomicOrdering); child != nil {
		return &AtomicOrdering{child}
	}
	return nil
}

func (n LoadInst) Alignment() *Alignment {
	if child := n.Child(selector.Alignment); child != nil {
		return &Alignment{child}
	}
	return nil
}

func (n LoadInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type LocalDefInst struct {
	Node
}

func (n LocalDefInst) Name() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n LocalDefInst) Inst() ValueInstruction {
	return ToLlvmNode(n.Child(selector.ValueInstruction)).(ValueInstruction)
}

type LocalDefTerm struct {
	Node
}

func (n LocalDefTerm) Name() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n LocalDefTerm) Term() ValueTerminator {
	return ToLlvmNode(n.Child(selector.ValueTerminator)).(ValueTerminator)
}

type LocalIdent struct {
	Node
}

type LowerBoundField struct {
	Node
}

func (n LowerBoundField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type MDFields struct {
	Node
}

func (n MDFields) MDFields() []MDField {
	nodes := n.Children(selector.MDField)
	var result []MDField = make([]MDField, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(MDField))
	}
	return result
}

type MDString struct {
	Node
}

func (n MDString) Val() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type MDTuple struct {
	Node
}

func (n MDTuple) MDFields() MDFields {
	return MDFields{n.Child(selector.MDFields)}
}

type MMXType struct {
	Node
}

type MacrosField struct {
	Node
}

func (n MacrosField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type MetadataAttachment struct {
	Node
}

func (n MetadataAttachment) Name() MetadataName {
	return MetadataName{n.Child(selector.MetadataName)}
}

func (n MetadataAttachment) MDNode() MDNode {
	return ToLlvmNode(n.Child(selector.MDNode)).(MDNode)
}

type MetadataDef struct {
	Node
}

func (n MetadataDef) Name() MetadataID {
	return MetadataID{n.Child(selector.MetadataID)}
}

func (n MetadataDef) Distinct() *Distinct {
	if child := n.Child(selector.Distinct); child != nil {
		return &Distinct{child}
	}
	return nil
}

func (n MetadataDef) MDNode() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.DIBasicType, ll.DICompileUnit, ll.DICompositeType, ll.DIDerivedType, ll.DIEnumerator, ll.DIExpression, ll.DIFile, ll.DIGlobalVariable, ll.DIGlobalVariableExpression, ll.DIImportedEntity, ll.DILabel, ll.DILexicalBlock, ll.DILexicalBlockFile, ll.DILocalVariable, ll.DILocation, ll.DIMacro, ll.DIMacroFile, ll.DIModule, ll.DINamespace, ll.DIObjCProperty, ll.DISubprogram, ll.DISubrange, ll.DISubroutineType, ll.DITemplateTypeParameter, ll.DITemplateValueParameter, ll.GenericDINode, ll.MDTuple))).(LlvmNode)
}

type MetadataID struct {
	Node
}

type MetadataName struct {
	Node
}

type MetadataType struct {
	Node
}

type Module struct {
	Node
}

func (n Module) TopLevelEntities() []TopLevelEntity {
	nodes := n.Children(selector.TopLevelEntity)
	var result []TopLevelEntity = make([]TopLevelEntity, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(TopLevelEntity))
	}
	return result
}

type ModuleAsm struct {
	Node
}

func (n ModuleAsm) Asm() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type MulExpr struct {
	Node
}

func (n MulExpr) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var result []OverflowFlag = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, OverflowFlag{node})
	}
	return result
}

func (n MulExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n MulExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type MulInst struct {
	Node
}

func (n MulInst) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var result []OverflowFlag = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, OverflowFlag{node})
	}
	return result
}

func (n MulInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n MulInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n MulInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type NameField struct {
	Node
}

func (n NameField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type NameTableKind struct {
	Node
}

func (n NameTableKind) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type NameTableKindField struct {
	Node
}

func (n NameTableKindField) NameTableKind() NameTableKind {
	return NameTableKind{n.Child(selector.NameTableKind)}
}

type NamedMetadataDef struct {
	Node
}

func (n NamedMetadataDef) Name() MetadataName {
	return MetadataName{n.Child(selector.MetadataName)}
}

func (n NamedMetadataDef) MDNodes() []MetadataNode {
	nodes := n.Children(selector.MetadataNode)
	var result []MetadataNode = make([]MetadataNode, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(MetadataNode))
	}
	return result
}

type NamedType struct {
	Node
}

func (n NamedType) Name() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

type NodesField struct {
	Node
}

func (n NodesField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type NoneConst struct {
	Node
}

type NullConst struct {
	Node
}

func (n NullConst) NullLit() NullLit {
	return NullLit{n.Child(selector.NullLit)}
}

type NullLit struct {
	Node
}

type OffsetField struct {
	Node
}

func (n OffsetField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type OpaqueType struct {
	Node
}

type OperandBundle struct {
	Node
}

func (n OperandBundle) Tag() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

func (n OperandBundle) Inputs() []TypeValue {
	nodes := n.Children(selector.TypeValue)
	var result []TypeValue = make([]TypeValue, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, TypeValue{node})
	}
	return result
}

type OperandBundles struct {
	Node
}

func (n OperandBundles) OperandBundles() []OperandBundle {
	nodes := n.Children(selector.OperandBundle)
	var result []OperandBundle = make([]OperandBundle, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, OperandBundle{node})
	}
	return result
}

type OperandsField struct {
	Node
}

func (n OperandsField) MDFields() MDFields {
	return MDFields{n.Child(selector.MDFields)}
}

type OrExpr struct {
	Node
}

func (n OrExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n OrExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type OrInst struct {
	Node
}

func (n OrInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n OrInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n OrInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type OverflowFlag struct {
	Node
}

type PackedStructType struct {
	Node
}

func (n PackedStructType) Fields() []Type {
	nodes := n.Children(selector.Type)
	var result []Type = make([]Type, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(Type))
	}
	return result
}

type Param struct {
	Node
}

func (n Param) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n Param) Attrs() []ParamAttr {
	nodes := n.Children(selector.ParamAttr)
	var result []ParamAttr = make([]ParamAttr, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(ParamAttr))
	}
	return result
}

func (n Param) Name() *LocalIdent {
	if child := n.Child(selector.LocalIdent); child != nil {
		return &LocalIdent{child}
	}
	return nil
}

type ParamAttribute struct {
	Node
}

type Params struct {
	Node
}

func (n Params) Params() []Param {
	nodes := n.Children(selector.Param)
	var result []Param = make([]Param, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, Param{node})
	}
	return result
}

func (n Params) Variadic() *Ellipsis {
	if child := n.Child(selector.Ellipsis); child != nil {
		return &Ellipsis{child}
	}
	return nil
}

type Personality struct {
	Node
}

func (n Personality) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n Personality) Val() Constant {
	return ToLlvmNode(n.Child(selector.Constant)).(Constant)
}

type PhiInst struct {
	Node
}

func (n PhiInst) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n PhiInst) Incs() []Inc {
	nodes := n.Children(selector.Inc)
	var result []Inc = make([]Inc, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, Inc{node})
	}
	return result
}

func (n PhiInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type PointerType struct {
	Node
}

func (n PointerType) Elem() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n PointerType) AddrSpace() *AddrSpace {
	if child := n.Child(selector.AddrSpace); child != nil {
		return &AddrSpace{child}
	}
	return nil
}

type Preemption struct {
	Node
}

type Prefix struct {
	Node
}

func (n Prefix) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n Prefix) Val() Constant {
	return ToLlvmNode(n.Child(selector.Constant)).(Constant)
}

type ProducerField struct {
	Node
}

func (n ProducerField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type Prologue struct {
	Node
}

func (n Prologue) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n Prologue) Val() Constant {
	return ToLlvmNode(n.Child(selector.Constant)).(Constant)
}

type PtrToIntExpr struct {
	Node
}

func (n PtrToIntExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n PtrToIntExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type PtrToIntInst struct {
	Node
}

func (n PtrToIntInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n PtrToIntInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n PtrToIntInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type ResumeTerm struct {
	Node
}

func (n ResumeTerm) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ResumeTerm) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type RetTerm struct {
	Node
}

func (n RetTerm) XTyp() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.ArrayType, ll.FloatType, ll.IntType, ll.LabelType, ll.MMXType, ll.NamedType, ll.PackedStructType, ll.PointerType, ll.StructType, ll.TokenType, ll.VectorType, ll.VoidType))).(LlvmNode)
}

func (n RetTerm) X() Value {
	if child := n.Child(selector.Value); child != nil {
		return ToLlvmNode(child).(Value)
	}
	return nil
}

func (n RetTerm) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type RetainedNodesField struct {
	Node
}

func (n RetainedNodesField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type RetainedTypesField struct {
	Node
}

func (n RetainedTypesField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ReturnAttribute struct {
	Node
}

type RuntimeLangField struct {
	Node
}

func (n RuntimeLangField) DwarfLang() DwarfLang {
	return DwarfLang{n.Child(selector.DwarfLang)}
}

type RuntimeVersionField struct {
	Node
}

func (n RuntimeVersionField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type SDivExpr struct {
	Node
}

func (n SDivExpr) Exact() *Exact {
	if child := n.Child(selector.Exact); child != nil {
		return &Exact{child}
	}
	return nil
}

func (n SDivExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SDivExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type SDivInst struct {
	Node
}

func (n SDivInst) Exact() *Exact {
	if child := n.Child(selector.Exact); child != nil {
		return &Exact{child}
	}
	return nil
}

func (n SDivInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SDivInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n SDivInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type SExtExpr struct {
	Node
}

func (n SExtExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SExtExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type SExtInst struct {
	Node
}

func (n SExtInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SExtInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n SExtInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type SIToFPExpr struct {
	Node
}

func (n SIToFPExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SIToFPExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type SIToFPInst struct {
	Node
}

func (n SIToFPInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SIToFPInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n SIToFPInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type SRemExpr struct {
	Node
}

func (n SRemExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SRemExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type SRemInst struct {
	Node
}

func (n SRemInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SRemInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n SRemInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type ScopeField struct {
	Node
}

func (n ScopeField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ScopeLineField struct {
	Node
}

func (n ScopeLineField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type Section struct {
	Node
}

func (n Section) Name() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type SelectExpr struct {
	Node
}

func (n SelectExpr) Cond() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SelectExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

func (n SelectExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst).Next(selector.TypeConst)}
}

type SelectInst struct {
	Node
}

func (n SelectInst) Cond() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SelectInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n SelectInst) Y() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue).Next(selector.TypeValue)}
}

func (n SelectInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type SelectionKind struct {
	Node
}

type SetterField struct {
	Node
}

func (n SetterField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type ShlExpr struct {
	Node
}

func (n ShlExpr) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var result []OverflowFlag = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, OverflowFlag{node})
	}
	return result
}

func (n ShlExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ShlExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type ShlInst struct {
	Node
}

func (n ShlInst) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var result []OverflowFlag = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, OverflowFlag{node})
	}
	return result
}

func (n ShlInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ShlInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n ShlInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type ShuffleVectorExpr struct {
	Node
}

func (n ShuffleVectorExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ShuffleVectorExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

func (n ShuffleVectorExpr) Mask() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst).Next(selector.TypeConst)}
}

type ShuffleVectorInst struct {
	Node
}

func (n ShuffleVectorInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ShuffleVectorInst) Y() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n ShuffleVectorInst) Mask() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue).Next(selector.TypeValue)}
}

func (n ShuffleVectorInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type SideEffect struct {
	Node
}

type SizeField struct {
	Node
}

func (n SizeField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type SourceField struct {
	Node
}

func (n SourceField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type SourceFilename struct {
	Node
}

func (n SourceFilename) Name() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type SplitDebugFilenameField struct {
	Node
}

func (n SplitDebugFilenameField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type SplitDebugInliningField struct {
	Node
}

func (n SplitDebugInliningField) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type StackAlignment struct {
	Node
}

func (n StackAlignment) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type StoreInst struct {
	Node
}

func (n StoreInst) Atomic() *Atomic {
	if child := n.Child(selector.Atomic); child != nil {
		return &Atomic{child}
	}
	return nil
}

func (n StoreInst) Volatile() *Volatile {
	if child := n.Child(selector.Volatile); child != nil {
		return &Volatile{child}
	}
	return nil
}

func (n StoreInst) Src() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n StoreInst) Dst() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n StoreInst) SyncScope() *SyncScope {
	if child := n.Child(selector.SyncScope); child != nil {
		return &SyncScope{child}
	}
	return nil
}

func (n StoreInst) AtomicOrdering() *AtomicOrdering {
	if child := n.Child(selector.AtomicOrdering); child != nil {
		return &AtomicOrdering{child}
	}
	return nil
}

func (n StoreInst) Alignment() *Alignment {
	if child := n.Child(selector.Alignment); child != nil {
		return &Alignment{child}
	}
	return nil
}

func (n StoreInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type StringLit struct {
	Node
}

type StructConst struct {
	Node
}

func (n StructConst) Fields() []TypeConst {
	nodes := n.Children(selector.TypeConst)
	var result []TypeConst = make([]TypeConst, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, TypeConst{node})
	}
	return result
}

type StructType struct {
	Node
}

func (n StructType) Fields() []Type {
	nodes := n.Children(selector.Type)
	var result []Type = make([]Type, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(Type))
	}
	return result
}

type SubExpr struct {
	Node
}

func (n SubExpr) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var result []OverflowFlag = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, OverflowFlag{node})
	}
	return result
}

func (n SubExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SubExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type SubInst struct {
	Node
}

func (n SubInst) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var result []OverflowFlag = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, OverflowFlag{node})
	}
	return result
}

func (n SubInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SubInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n SubInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type SwiftError struct {
	Node
}

type SwitchTerm struct {
	Node
}

func (n SwitchTerm) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SwitchTerm) Default() Label {
	return Label{n.Child(selector.Label)}
}

func (n SwitchTerm) Cases() []Case {
	nodes := n.Children(selector.Case)
	var result []Case = make([]Case, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, Case{node})
	}
	return result
}

func (n SwitchTerm) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type SyncScope struct {
	Node
}

func (n SyncScope) Scope() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type TLSModel struct {
	Node
}

type TagField struct {
	Node
}

func (n TagField) DwarfTag() DwarfTag {
	return DwarfTag{n.Child(selector.DwarfTag)}
}

type Tail struct {
	Node
}

type TargetDataLayout struct {
	Node
}

func (n TargetDataLayout) DataLayout() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type TargetTriple struct {
	Node
}

func (n TargetTriple) TargetTriple() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type TemplateParamsField struct {
	Node
}

func (n TemplateParamsField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ThisAdjustmentField struct {
	Node
}

func (n ThisAdjustmentField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type ThreadLocal struct {
	Node
}

func (n ThreadLocal) Model() *TLSModel {
	if child := n.Child(selector.TLSModel); child != nil {
		return &TLSModel{child}
	}
	return nil
}

type ThrownTypesField struct {
	Node
}

func (n ThrownTypesField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type TokenType struct {
	Node
}

type TruncExpr struct {
	Node
}

func (n TruncExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n TruncExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type TruncInst struct {
	Node
}

func (n TruncInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n TruncInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n TruncInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type TypeConst struct {
	Node
}

func (n TypeConst) Typ() FirstClassType {
	return ToLlvmNode(n.Child(selector.FirstClassType)).(FirstClassType)
}

func (n TypeConst) Val() Constant {
	return ToLlvmNode(n.Child(selector.Constant)).(Constant)
}

type TypeDef struct {
	Node
}

func (n TypeDef) Alias() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n TypeDef) Typ() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.ArrayType, ll.FloatType, ll.FuncType, ll.IntType, ll.LabelType, ll.MMXType, ll.MetadataType, ll.NamedType, ll.OpaqueType, ll.PackedStructType, ll.PointerType, ll.StructType, ll.TokenType, ll.VectorType, ll.VoidType))).(LlvmNode)
}

type TypeField struct {
	Node
}

func (n TypeField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type TypeMacinfoField struct {
	Node
}

func (n TypeMacinfoField) DwarfMacinfo() DwarfMacinfo {
	return DwarfMacinfo{n.Child(selector.DwarfMacinfo)}
}

type TypeValue struct {
	Node
}

func (n TypeValue) Typ() FirstClassType {
	return ToLlvmNode(n.Child(selector.FirstClassType)).(FirstClassType)
}

func (n TypeValue) Val() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

type TypesField struct {
	Node
}

func (n TypesField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type UDivExpr struct {
	Node
}

func (n UDivExpr) Exact() *Exact {
	if child := n.Child(selector.Exact); child != nil {
		return &Exact{child}
	}
	return nil
}

func (n UDivExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n UDivExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type UDivInst struct {
	Node
}

func (n UDivInst) Exact() *Exact {
	if child := n.Child(selector.Exact); child != nil {
		return &Exact{child}
	}
	return nil
}

func (n UDivInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n UDivInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n UDivInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type UIToFPExpr struct {
	Node
}

func (n UIToFPExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n UIToFPExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type UIToFPInst struct {
	Node
}

func (n UIToFPInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n UIToFPInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n UIToFPInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type URemExpr struct {
	Node
}

func (n URemExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n URemExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type URemInst struct {
	Node
}

func (n URemInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n URemInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n URemInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type UintLit struct {
	Node
}

type UndefConst struct {
	Node
}

type UnitField struct {
	Node
}

func (n UnitField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type UnnamedAddr struct {
	Node
}

type UnreachableTerm struct {
	Node
}

func (n UnreachableTerm) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type UnwindTarget struct {
	Node
}

func (n UnwindTarget) Label() *Label {
	if child := n.Child(selector.Label); child != nil {
		return &Label{child}
	}
	return nil
}

type UseListOrder struct {
	Node
}

func (n UseListOrder) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n UseListOrder) Val() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n UseListOrder) Indicies() []UintLit {
	nodes := n.Children(selector.UintLit)
	var result []UintLit = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, UintLit{node})
	}
	return result
}

type UseListOrderBB struct {
	Node
}

func (n UseListOrderBB) Func() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n UseListOrderBB) Block() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n UseListOrderBB) Indicies() []UintLit {
	nodes := n.Children(selector.UintLit)
	var result []UintLit = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, UintLit{node})
	}
	return result
}

type VAArgInst struct {
	Node
}

func (n VAArgInst) ArgList() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n VAArgInst) ArgType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n VAArgInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type ValueField struct {
	Node
}

func (n ValueField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ValueIntField struct {
	Node
}

func (n ValueIntField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type ValueStringField struct {
	Node
}

func (n ValueStringField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type VarField struct {
	Node
}

func (n VarField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type VectorConst struct {
	Node
}

func (n VectorConst) Elems() []TypeConst {
	nodes := n.Children(selector.TypeConst)
	var result []TypeConst = make([]TypeConst, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, TypeConst{node})
	}
	return result
}

type VectorType struct {
	Node
}

func (n VectorType) Len() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

func (n VectorType) Elem() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type VirtualIndexField struct {
	Node
}

func (n VirtualIndexField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type VirtualityField struct {
	Node
}

func (n VirtualityField) DwarfVirtuality() DwarfVirtuality {
	return DwarfVirtuality{n.Child(selector.DwarfVirtuality)}
}

type Visibility struct {
	Node
}

type VoidType struct {
	Node
}

type Volatile struct {
	Node
}

type VtableHolderField struct {
	Node
}

func (n VtableHolderField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type Weak struct {
	Node
}

type XorExpr struct {
	Node
}

func (n XorExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n XorExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type XorInst struct {
	Node
}

func (n XorInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n XorInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n XorInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type ZExtExpr struct {
	Node
}

func (n ZExtExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ZExtExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type ZExtInst struct {
	Node
}

func (n ZExtInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ZExtInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n ZExtInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type ZeroInitializerConst struct {
	Node
}
