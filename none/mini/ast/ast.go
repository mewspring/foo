// generated by Textmapper; DO NOT EDIT

package ast

import (
	"github.com/mewspring/foo/none/mini"
	"github.com/mewspring/foo/none/mini/selector"
)

type Node interface {
	Type() mini.NodeType
	Offset() int
	Endoffset() int
	// Child returns the first child node that matches the selector.
	Child(sel selector.Selector) Node
	Children(sel selector.Selector) []Node
	// Next returns the first element among the following siblings that matches the selector.
	Next(sel selector.Selector) Node
	// NextAll returns all following siblings of the node that match the selector.
	NextAll(sel selector.Selector) []Node
	Text() string
}

// Interfaces.

type LlvmNode interface {
  Node
	llvmNodeNode()
}

// All types implement LlvmNode.
func (AddInst) llvmNodeNode() {}
func (Args) llvmNodeNode() {}
func (BasicBlock) llvmNodeNode() {}
func (CallInst) llvmNodeNode() {}
func (FloatKind) llvmNodeNode() {}
func (FloatType) llvmNodeNode() {}
func (FooBar) llvmNodeNode() {}
func (FooBaz) llvmNodeNode() {}
func (FuncBody) llvmNodeNode() {}
func (FuncDef) llvmNodeNode() {}
func (FuncHeader) llvmNodeNode() {}
func (FuncMetadata) llvmNodeNode() {}
func (GlobalIdent) llvmNodeNode() {}
func (InstMetadata) llvmNodeNode() {}
func (IntConst) llvmNodeNode() {}
func (IntLit) llvmNodeNode() {}
func (IntType) llvmNodeNode() {}
func (LocalDefInst) llvmNodeNode() {}
func (LocalIdent) llvmNodeNode() {}
func (Module) llvmNodeNode() {}
func (OperandBundles) llvmNodeNode() {}
func (Params) llvmNodeNode() {}
func (RetTerm) llvmNodeNode() {}
func (TypeValue) llvmNodeNode() {}
func (VoidType) llvmNodeNode() {}

type ConcreteType interface {
  LlvmNode
	concreteTypeNode()
}

// concreteTypeNode() ensures that only the following types can be
// assigned to ConcreteType.
//
func (FloatType) concreteTypeNode() {}
func (IntType) concreteTypeNode() {}

type Constant interface {
  LlvmNode
	constantNode()
}

// constantNode() ensures that only the following types can be
// assigned to Constant.
//
func (GlobalIdent) constantNode() {}
func (IntConst) constantNode() {}

type FirstClassType interface {
  LlvmNode
	firstClassTypeNode()
}

// firstClassTypeNode() ensures that only the following types can be
// assigned to FirstClassType.
//
func (FloatType) firstClassTypeNode() {}
func (IntType) firstClassTypeNode() {}

type Instruction interface {
  LlvmNode
	instructionNode()
}

// instructionNode() ensures that only the following types can be
// assigned to Instruction.
//
func (AddInst) instructionNode() {}
func (CallInst) instructionNode() {}
func (LocalDefInst) instructionNode() {}

type Terminator interface {
  LlvmNode
	terminatorNode()
}

// terminatorNode() ensures that only the following types can be
// assigned to Terminator.
//
func (FooBar) terminatorNode() {}
func (RetTerm) terminatorNode() {}

type TopLevelEntity interface {
  LlvmNode
	topLevelEntityNode()
}

// topLevelEntityNode() ensures that only the following types can be
// assigned to TopLevelEntity.
//
func (FooBaz) topLevelEntityNode() {}
func (FuncDef) topLevelEntityNode() {}

type Type interface {
  LlvmNode
	typeNode()
}

// typeNode() ensures that only the following types can be
// assigned to Type.
//
func (FloatType) typeNode() {}
func (IntType) typeNode() {}
func (VoidType) typeNode() {}

type Value interface {
  LlvmNode
	valueNode()
}

// valueNode() ensures that only the following types can be
// assigned to Value.
//
func (GlobalIdent) valueNode() {}
func (IntConst) valueNode() {}
func (LocalIdent) valueNode() {}

type ValueInstruction interface {
  LlvmNode
	valueInstructionNode()
}

// valueInstructionNode() ensures that only the following types can be
// assigned to ValueInstruction.
//
func (AddInst) valueInstructionNode() {}
func (CallInst) valueInstructionNode() {}

// Types.

type AddInst struct {
	Node
}

func (n AddInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n AddInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n AddInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type Args struct {
	Node
}

type BasicBlock struct {
	Node
}

func (n BasicBlock) Insts() []Instruction {
	nodes := n.Children(selector.Instruction)
	var result []Instruction = make([]Instruction, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(Instruction))
	}
	return result
}

func (n BasicBlock) Term() Terminator {
	return ToLlvmNode(n.Child(selector.Terminator)).(Terminator)
}

type CallInst struct {
	Node
}

func (n CallInst) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n CallInst) Callee() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n CallInst) Args() Args {
	return Args{n.Child(selector.Args)}
}

func (n CallInst) OperandBundles() OperandBundles {
	return OperandBundles{n.Child(selector.OperandBundles)}
}

func (n CallInst) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type FloatKind struct {
	Node
}

type FloatType struct {
	Node
}

func (n FloatType) FloatKind() FloatKind {
	return FloatKind{n.Child(selector.FloatKind)}
}

type FooBar struct {
	Node
}

type FooBaz struct {
	Node
}

type FuncBody struct {
	Node
}

func (n FuncBody) Blocks() []BasicBlock {
	nodes := n.Children(selector.BasicBlock)
	var result []BasicBlock = make([]BasicBlock, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, BasicBlock{node})
	}
	return result
}

type FuncDef struct {
	Node
}

func (n FuncDef) Header() FuncHeader {
	return FuncHeader{n.Child(selector.FuncHeader)}
}

func (n FuncDef) Metadata() FuncMetadata {
	return FuncMetadata{n.Child(selector.FuncMetadata)}
}

func (n FuncDef) Body() FuncBody {
	return FuncBody{n.Child(selector.FuncBody)}
}

type FuncHeader struct {
	Node
}

func (n FuncHeader) RetType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FuncHeader) Name() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n FuncHeader) Params() Params {
	return Params{n.Child(selector.Params)}
}

type FuncMetadata struct {
	Node
}

type GlobalIdent struct {
	Node
}

type InstMetadata struct {
	Node
}

type IntConst struct {
	Node
}

func (n IntConst) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type IntLit struct {
	Node
}

type IntType struct {
	Node
}

type LocalDefInst struct {
	Node
}

func (n LocalDefInst) Name() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n LocalDefInst) Inst() ValueInstruction {
	return ToLlvmNode(n.Child(selector.ValueInstruction)).(ValueInstruction)
}

type LocalIdent struct {
	Node
}

type Module struct {
	Node
}

func (n Module) TopLevelEntities() []TopLevelEntity {
	nodes := n.Children(selector.TopLevelEntity)
	var result []TopLevelEntity = make([]TopLevelEntity, 0, len(nodes))
	for _, node := range nodes {
		result = append(result, ToLlvmNode(node).(TopLevelEntity))
	}
	return result
}

type OperandBundles struct {
	Node
}

type Params struct {
	Node
}

type RetTerm struct {
	Node
}

func (n RetTerm) XTyp() VoidType {
	return VoidType{n.Child(selector.VoidType)}
}

func (n RetTerm) InstMetadata() InstMetadata {
	return InstMetadata{n.Child(selector.InstMetadata)}
}

type TypeValue struct {
	Node
}

func (n TypeValue) Typ() FirstClassType {
	return ToLlvmNode(n.Child(selector.FirstClassType)).(FirstClassType)
}

func (n TypeValue) Val() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

type VoidType struct {
	Node
}


