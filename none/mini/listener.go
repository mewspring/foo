// generated by Textmapper; DO NOT EDIT

package mini

import (
	"fmt"
)

type NodeType int

type Listener func(t NodeType, offset, endoffset int)

const (
	GlobalIdent NodeType = iota + 1
	LocalIdent
	IntLit
	Module  // TopLevelEntities=(TopLevelEntity)*
	FooBaz
	FuncDef  // Header=FuncHeader Metadata=FuncMetadata Body=FuncBody
	FuncHeader  // RetType=Type Name=GlobalIdent Params
	FuncBody  // Blocks=(BasicBlock)+
	VoidType
	IntType
	FloatType  // FloatKind
	FloatKind
	IntConst  // IntLit
	BasicBlock  // Insts=(Instruction)* Term=Terminator
	LocalDefInst  // Name=LocalIdent Inst=ValueInstruction
	AddInst  // X=TypeValue Y=Value InstMetadata
	CallInst  // Typ=Type Callee=Value Args OperandBundles InstMetadata
	FooBar
	RetTerm  // XTyp=VoidType InstMetadata
	Args
	FuncMetadata
	InstMetadata
	OperandBundles
	Params
	TypeValue  // Typ=FirstClassType Val=Value
	NodeTypeMax
)

var nodeTypeStr = [...]string{
	"NONE",
	"GlobalIdent",
	"LocalIdent",
	"IntLit",
	"Module",
	"FooBaz",
	"FuncDef",
	"FuncHeader",
	"FuncBody",
	"VoidType",
	"IntType",
	"FloatType",
	"FloatKind",
	"IntConst",
	"BasicBlock",
	"LocalDefInst",
	"AddInst",
	"CallInst",
	"FooBar",
	"RetTerm",
	"Args",
	"FuncMetadata",
	"InstMetadata",
	"OperandBundles",
	"Params",
	"TypeValue",
}

func (t NodeType) String() string {
	if t >= 0 && int(t) < len(nodeTypeStr) {
		return nodeTypeStr[t]
	}
	return fmt.Sprintf("node(%d)", t)
}

var ConcreteType = []NodeType{
    FloatType,
    IntType,
}

var Constant = []NodeType{
    GlobalIdent,
    IntConst,
}

var FirstClassType = []NodeType{
    FloatType,
    IntType,
}

var Instruction = []NodeType{
    AddInst,
    CallInst,
    LocalDefInst,
}

var Terminator = []NodeType{
    FooBar,
    RetTerm,
}

var TopLevelEntity = []NodeType{
    FooBaz,
    FuncDef,
}

var Type = []NodeType{
    FloatType,
    IntType,
    VoidType,
}

var Value = []NodeType{
    GlobalIdent,
    IntConst,
    LocalIdent,
}

var ValueInstruction = []NodeType{
    AddInst,
    CallInst,
}

var ruleNodeType = [...]NodeType{
	GlobalIdent, // GlobalIdent : global_ident_tok
	LocalIdent, // LocalIdent : local_ident_tok
	IntLit, // IntLit : int_lit_tok
	Module, // Module : TopLevelEntity_optlist
	0, // TopLevelEntity_optlist : TopLevelEntity_optlist TopLevelEntity
	0, // TopLevelEntity_optlist :
	0, // TopLevelEntity : FuncDef
	0, // TopLevelEntity : FooBaz
	FooBaz, // FooBaz : 'foobaz'
	FuncDef, // FuncDef : 'define' FuncHeader FuncMetadata FuncBody
	FuncHeader, // FuncHeader : Type GlobalIdent '(' Params ')'
	0, // BasicBlock_list : BasicBlock_list BasicBlock
	0, // BasicBlock_list : BasicBlock
	FuncBody, // FuncBody : '{' BasicBlock_list '}'
	0, // Type : VoidType
	0, // Type : FirstClassType
	0, // FirstClassType : ConcreteType
	0, // ConcreteType : IntType
	0, // ConcreteType : FloatType
	VoidType, // VoidType : 'void'
	IntType, // IntType : int_type_tok
	FloatType, // FloatType : FloatKind
	FloatKind, // FloatKind : 'half'
	FloatKind, // FloatKind : 'float'
	FloatKind, // FloatKind : 'double'
	FloatKind, // FloatKind : 'x86_fp80'
	FloatKind, // FloatKind : 'fp128'
	FloatKind, // FloatKind : 'ppc_fp128'
	0, // Value : Constant
	0, // Value : LocalIdent
	0, // Constant : IntConst
	0, // Constant : GlobalIdent
	IntConst, // IntConst : IntLit
	BasicBlock, // BasicBlock : Instruction_optlist Terminator
	0, // Instruction_optlist : Instruction_optlist Instruction
	0, // Instruction_optlist :
	0, // Instruction : LocalDefInst
	0, // Instruction : ValueInstruction
	LocalDefInst, // LocalDefInst : LocalIdent '=' ValueInstruction
	0, // ValueInstruction : AddInst
	0, // ValueInstruction : CallInst
	AddInst, // AddInst : 'add' TypeValue ',' Value InstMetadata
	CallInst, // CallInst : 'call' Type Value '(' Args ')' OperandBundles InstMetadata
	0, // Terminator : RetTerm
	0, // Terminator : FooBar
	FooBar, // FooBar : 'foobar'
	RetTerm, // RetTerm : 'ret' VoidType InstMetadata
	Args, // Args :
	FuncMetadata, // FuncMetadata :
	InstMetadata, // InstMetadata :
	OperandBundles, // OperandBundles :
	Params, // Params :
	TypeValue, // TypeValue : FirstClassType Value
}

