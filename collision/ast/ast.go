// generated by Textmapper; DO NOT EDIT

package ast

import (
	"github.com/mewspring/foo/collision"
	"github.com/mewspring/foo/collision/selector"
)

type Node interface {
	Type() collision.NodeType
	Offset() int
	Endoffset() int
	// Child returns the first child node that matches the selector.
	Child(sel selector.Selector) Node
	Children(sel selector.Selector) []Node
	// Next returns the first element among the following siblings that matches the selector.
	Next(sel selector.Selector) Node
	// NextAll returns all following siblings of the node that match the selector.
	NextAll(sel selector.Selector) []Node
	Text() string
}

// Interfaces.

type CollisionNode interface {
	Node
	collisionNodeNode()
}

// All types implement CollisionNode.
func (FuncHeader) collisionNodeNode() {}
func (GC) collisionNodeNode()         {}

// Types.

type FuncHeader struct {
	Node
}

func (n FuncHeader) GC() *GC {
	if child := n.Child(selector.GC); child != nil {
		return &GC{child}
	}
	return nil
}

type GC struct {
	Node
}
